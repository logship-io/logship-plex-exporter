/*
 * Plex Media Server API
 *
 * This is an unofficial OpenAPI specification for the Plex Media Server API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Logship.Plex.OpenApi.Model;
using Logship.Plex.OpenApi.Client;
using System.Reflection;

namespace Logship.Plex.OpenApi.Test.Model
{
    /// <summary>
    ///  Class for testing GeoData
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class GeoDataTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for GeoData
        //private GeoData instance;

        public GeoDataTests()
        {
            // TODO uncomment below to create an instance of GeoData
            //instance = new GeoData();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GeoData
        /// </summary>
        [Fact]
        public void GeoDataInstanceTest()
        {
            // TODO uncomment below to test "IsType" GeoData
            //Assert.IsType<GeoData>(instance);
        }

        /// <summary>
        /// Test the property 'Code'
        /// </summary>
        [Fact]
        public void CodeTest()
        {
            // TODO unit test for the property 'Code'
        }

        /// <summary>
        /// Test the property 'ContinentCode'
        /// </summary>
        [Fact]
        public void ContinentCodeTest()
        {
            // TODO unit test for the property 'ContinentCode'
        }

        /// <summary>
        /// Test the property 'Country'
        /// </summary>
        [Fact]
        public void CountryTest()
        {
            // TODO unit test for the property 'Country'
        }

        /// <summary>
        /// Test the property 'City'
        /// </summary>
        [Fact]
        public void CityTest()
        {
            // TODO unit test for the property 'City'
        }

        /// <summary>
        /// Test the property 'VarTimeZone'
        /// </summary>
        [Fact]
        public void VarTimeZoneTest()
        {
            // TODO unit test for the property 'VarTimeZone'
        }

        /// <summary>
        /// Test the property 'PostalCode'
        /// </summary>
        [Fact]
        public void PostalCodeTest()
        {
            // TODO unit test for the property 'PostalCode'
        }

        /// <summary>
        /// Test the property 'Subdivisions'
        /// </summary>
        [Fact]
        public void SubdivisionsTest()
        {
            // TODO unit test for the property 'Subdivisions'
        }

        /// <summary>
        /// Test the property 'Coordinates'
        /// </summary>
        [Fact]
        public void CoordinatesTest()
        {
            // TODO unit test for the property 'Coordinates'
        }

        /// <summary>
        /// Test the property 'EuropeanUnionMember'
        /// </summary>
        [Fact]
        public void EuropeanUnionMemberTest()
        {
            // TODO unit test for the property 'EuropeanUnionMember'
        }

        /// <summary>
        /// Test the property 'InPrivacyRestrictedCountry'
        /// </summary>
        [Fact]
        public void InPrivacyRestrictedCountryTest()
        {
            // TODO unit test for the property 'InPrivacyRestrictedCountry'
        }

        /// <summary>
        /// Test the property 'InPrivacyRestrictedRegion'
        /// </summary>
        [Fact]
        public void InPrivacyRestrictedRegionTest()
        {
            // TODO unit test for the property 'InPrivacyRestrictedRegion'
        }
    }
}
