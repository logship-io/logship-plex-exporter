/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Logship.Plex.OpenApi.Client;
using Logship.Plex.OpenApi.Api;
using Logship.Plex.OpenApi.Extensions;
using Xunit;

namespace Logship.Plex.OpenApi.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Plex_Token, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Plex_Token, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Plex_Token, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Plex_Token, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var activitiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var butlerApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IButlerApi>();
            Assert.True(butlerApi.HttpClient.BaseAddress != null);

            var libraryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILibraryApi>();
            Assert.True(libraryApi.HttpClient.BaseAddress != null);

            var plexApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPlexApi>();
            Assert.True(plexApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var statisticsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStatisticsApi>();
            Assert.True(statisticsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var activitiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var butlerApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IButlerApi>();
            Assert.True(butlerApi.HttpClient.BaseAddress != null);

            var libraryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILibraryApi>();
            Assert.True(libraryApi.HttpClient.BaseAddress != null);

            var plexApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPlexApi>();
            Assert.True(plexApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var statisticsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStatisticsApi>();
            Assert.True(statisticsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var activitiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);
            
            var butlerApi = _hostUsingAddWithAClient.Services.GetRequiredService<IButlerApi>();
            Assert.True(butlerApi.HttpClient.BaseAddress != null);
            
            var libraryApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILibraryApi>();
            Assert.True(libraryApi.HttpClient.BaseAddress != null);
            
            var plexApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPlexApi>();
            Assert.True(plexApi.HttpClient.BaseAddress != null);
            
            var serverApi = _hostUsingAddWithAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);
            
            var sessionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);
            
            var statisticsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStatisticsApi>();
            Assert.True(statisticsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var activitiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var butlerApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IButlerApi>();
            Assert.True(butlerApi.HttpClient.BaseAddress != null);

            var libraryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILibraryApi>();
            Assert.True(libraryApi.HttpClient.BaseAddress != null);

            var plexApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPlexApi>();
            Assert.True(plexApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var statisticsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStatisticsApi>();
            Assert.True(statisticsApi.HttpClient.BaseAddress != null);
        }
    }
}
