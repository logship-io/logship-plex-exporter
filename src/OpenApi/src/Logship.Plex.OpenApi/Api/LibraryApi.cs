// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Logship.Plex.OpenApi.Client;
using Logship.Plex.OpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace Logship.Plex.OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILibraryApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LibraryApiEvents Events { get; }

        /// <summary>
        /// Get Media Libraries
        /// </summary>
        /// <remarks>
        /// Get a list of all media libraries on the Plex server.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsGetApiResponse"/>&gt;</returns>
        Task<ILibrarySectionsGetApiResponse> LibrarySectionsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Media Libraries
        /// </summary>
        /// <remarks>
        /// Get a list of all media libraries on the Plex server.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsGetApiResponse"/>?&gt;</returns>
        Task<ILibrarySectionsGetApiResponse?> LibrarySectionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Media in a Library
        /// </summary>
        /// <remarks>
        /// Get a list of all media in a specified library.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryKey">Key for the media library</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsLibraryKeyAllGetApiResponse"/>&gt;</returns>
        Task<ILibrarySectionsLibraryKeyAllGetApiResponse> LibrarySectionsLibraryKeyAllGetAsync(string libraryKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Media in a Library
        /// </summary>
        /// <remarks>
        /// Get a list of all media in a specified library.
        /// </remarks>
        /// <param name="libraryKey">Key for the media library</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsLibraryKeyAllGetApiResponse"/>?&gt;</returns>
        Task<ILibrarySectionsLibraryKeyAllGetApiResponse?> LibrarySectionsLibraryKeyAllGetOrDefaultAsync(string libraryKey, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ILibrarySectionsGetApiResponse"/>
    /// </summary>
    public interface ILibrarySectionsGetApiResponse : Logship.Plex.OpenApi.Client.IApiResponse, IOk<Logship.Plex.OpenApi.Model.LibrarySectionsGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILibrarySectionsLibraryKeyAllGetApiResponse"/>
    /// </summary>
    public interface ILibrarySectionsLibraryKeyAllGetApiResponse : Logship.Plex.OpenApi.Client.IApiResponse, IOk<Logship.Plex.OpenApi.Model.LibrarySectionsLibraryKeyAllGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LibraryApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLibrarySectionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLibrarySectionsGet;

        internal void ExecuteOnLibrarySectionsGet(LibraryApi.LibrarySectionsGetApiResponse apiResponse)
        {
            OnLibrarySectionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLibrarySectionsGet(Exception exception)
        {
            OnErrorLibrarySectionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLibrarySectionsLibraryKeyAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLibrarySectionsLibraryKeyAllGet;

        internal void ExecuteOnLibrarySectionsLibraryKeyAllGet(LibraryApi.LibrarySectionsLibraryKeyAllGetApiResponse apiResponse)
        {
            OnLibrarySectionsLibraryKeyAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLibrarySectionsLibraryKeyAllGet(Exception exception)
        {
            OnErrorLibrarySectionsLibraryKeyAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LibraryApi : ILibraryApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LibraryApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LibraryApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryApi(ILogger<LibraryApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LibraryApiEvents libraryApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LibraryApi>();
            HttpClient = httpClient;
            Events = libraryApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterLibrarySectionsGetDefaultImplementation(ILibrarySectionsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterLibrarySectionsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterLibrarySectionsGet(ref bool suppressDefaultLog, ILibrarySectionsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorLibrarySectionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLibrarySectionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorLibrarySectionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Media Libraries Get a list of all media libraries on the Plex server.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsGetApiResponse"/>&gt;</returns>
        public async Task<ILibrarySectionsGetApiResponse?> LibrarySectionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LibrarySectionsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Media Libraries Get a list of all media libraries on the Plex server.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsGetApiResponse"/>&gt;</returns>
        public async Task<ILibrarySectionsGetApiResponse> LibrarySectionsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/library/sections";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-Plex-Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);

                    apiKeyTokenLocalVar1.UseInQuery(httpRequestMessageLocalVar, uriBuilderLocalVar, parseQueryStringLocalVar);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LibrarySectionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LibrarySectionsGetApiResponse>();

                        LibrarySectionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/library/sections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLibrarySectionsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnLibrarySectionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLibrarySectionsGetDefaultImplementation(e, "/library/sections", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorLibrarySectionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LibrarySectionsGetApiResponse"/>
        /// </summary>
        public partial class LibrarySectionsGetApiResponse : Logship.Plex.OpenApi.Client.ApiResponse, ILibrarySectionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LibrarySectionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LibrarySectionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LibrarySectionsGetApiResponse(ILogger<LibrarySectionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Logship.Plex.OpenApi.Model.LibrarySectionsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Logship.Plex.OpenApi.Model.LibrarySectionsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Logship.Plex.OpenApi.Model.LibrarySectionsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLibrarySectionsLibraryKeyAllGet(ref string libraryKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="libraryKey"></param>
        /// <returns></returns>
        private void ValidateLibrarySectionsLibraryKeyAllGet(string libraryKey)
        {
            if (libraryKey == null)
                throw new ArgumentNullException(nameof(libraryKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="libraryKey"></param>
        private void AfterLibrarySectionsLibraryKeyAllGetDefaultImplementation(ILibrarySectionsLibraryKeyAllGetApiResponse apiResponseLocalVar, string libraryKey)
        {
            bool suppressDefaultLog = false;
            AfterLibrarySectionsLibraryKeyAllGet(ref suppressDefaultLog, apiResponseLocalVar, libraryKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="libraryKey"></param>
        partial void AfterLibrarySectionsLibraryKeyAllGet(ref bool suppressDefaultLog, ILibrarySectionsLibraryKeyAllGetApiResponse apiResponseLocalVar, string libraryKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="libraryKey"></param>
        private void OnErrorLibrarySectionsLibraryKeyAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string libraryKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLibrarySectionsLibraryKeyAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, libraryKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="libraryKey"></param>
        partial void OnErrorLibrarySectionsLibraryKeyAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string libraryKey);

        /// <summary>
        /// Get All Media in a Library Get a list of all media in a specified library.
        /// </summary>
        /// <param name="libraryKey">Key for the media library</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsLibraryKeyAllGetApiResponse"/>&gt;</returns>
        public async Task<ILibrarySectionsLibraryKeyAllGetApiResponse?> LibrarySectionsLibraryKeyAllGetOrDefaultAsync(string libraryKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LibrarySectionsLibraryKeyAllGetAsync(libraryKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Media in a Library Get a list of all media in a specified library.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryKey">Key for the media library</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILibrarySectionsLibraryKeyAllGetApiResponse"/>&gt;</returns>
        public async Task<ILibrarySectionsLibraryKeyAllGetApiResponse> LibrarySectionsLibraryKeyAllGetAsync(string libraryKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLibrarySectionsLibraryKeyAllGet(libraryKey);

                FormatLibrarySectionsLibraryKeyAllGet(ref libraryKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/library/sections/{libraryKey}/all";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlibraryKey%7D", Uri.EscapeDataString(libraryKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-Plex-Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);

                    apiKeyTokenLocalVar1.UseInQuery(httpRequestMessageLocalVar, uriBuilderLocalVar, parseQueryStringLocalVar);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LibrarySectionsLibraryKeyAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LibrarySectionsLibraryKeyAllGetApiResponse>();

                        LibrarySectionsLibraryKeyAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/library/sections/{libraryKey}/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLibrarySectionsLibraryKeyAllGetDefaultImplementation(apiResponseLocalVar, libraryKey);

                        Events.ExecuteOnLibrarySectionsLibraryKeyAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLibrarySectionsLibraryKeyAllGetDefaultImplementation(e, "/library/sections/{libraryKey}/all", uriBuilderLocalVar.Path, libraryKey);
                Events.ExecuteOnErrorLibrarySectionsLibraryKeyAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LibrarySectionsLibraryKeyAllGetApiResponse"/>
        /// </summary>
        public partial class LibrarySectionsLibraryKeyAllGetApiResponse : Logship.Plex.OpenApi.Client.ApiResponse, ILibrarySectionsLibraryKeyAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LibrarySectionsLibraryKeyAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LibrarySectionsLibraryKeyAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LibrarySectionsLibraryKeyAllGetApiResponse(ILogger<LibrarySectionsLibraryKeyAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Logship.Plex.OpenApi.Model.LibrarySectionsLibraryKeyAllGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Logship.Plex.OpenApi.Model.LibrarySectionsLibraryKeyAllGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Logship.Plex.OpenApi.Model.LibrarySectionsLibraryKeyAllGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
