// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetServerCapabilities200ResponseMediaContainer
    /// </summary>
    public partial class GetServerCapabilities200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetServerCapabilities200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="allowCameraUpload">allowCameraUpload</param>
        /// <param name="allowChannelAccess">allowChannelAccess</param>
        /// <param name="allowMediaDeletion">allowMediaDeletion</param>
        /// <param name="allowSharing">allowSharing</param>
        /// <param name="allowSync">allowSync</param>
        /// <param name="allowTuners">allowTuners</param>
        /// <param name="backgroundProcessing">backgroundProcessing</param>
        /// <param name="certificate">certificate</param>
        /// <param name="companionProxy">companionProxy</param>
        /// <param name="countryCode">countryCode</param>
        /// <param name="diagnostics">diagnostics</param>
        /// <param name="eventStream">eventStream</param>
        /// <param name="friendlyName">friendlyName</param>
        /// <param name="hubSearch">hubSearch</param>
        /// <param name="itemClusters">itemClusters</param>
        /// <param name="livetv">livetv</param>
        /// <param name="machineIdentifier">machineIdentifier</param>
        /// <param name="mediaProviders">mediaProviders</param>
        /// <param name="multiuser">multiuser</param>
        /// <param name="musicAnalysis">musicAnalysis</param>
        /// <param name="myPlex">myPlex</param>
        /// <param name="myPlexMappingState">myPlexMappingState</param>
        /// <param name="myPlexSigninState">myPlexSigninState</param>
        /// <param name="myPlexSubscription">myPlexSubscription</param>
        /// <param name="myPlexUsername">myPlexUsername</param>
        /// <param name="offlineTranscode">offlineTranscode</param>
        /// <param name="ownerFeatures">ownerFeatures</param>
        /// <param name="photoAutoTag">photoAutoTag</param>
        /// <param name="platform">platform</param>
        /// <param name="platformVersion">platformVersion</param>
        /// <param name="pluginHost">pluginHost</param>
        /// <param name="pushNotifications">pushNotifications</param>
        /// <param name="readOnlyLibraries">readOnlyLibraries</param>
        /// <param name="streamingBrainABRVersion">streamingBrainABRVersion</param>
        /// <param name="streamingBrainVersion">streamingBrainVersion</param>
        /// <param name="sync">sync</param>
        /// <param name="transcoderActiveVideoSessions">transcoderActiveVideoSessions</param>
        /// <param name="transcoderAudio">transcoderAudio</param>
        /// <param name="transcoderLyrics">transcoderLyrics</param>
        /// <param name="transcoderPhoto">transcoderPhoto</param>
        /// <param name="transcoderSubtitles">transcoderSubtitles</param>
        /// <param name="transcoderVideo">transcoderVideo</param>
        /// <param name="transcoderVideoBitrates">transcoderVideoBitrates</param>
        /// <param name="transcoderVideoQualities">transcoderVideoQualities</param>
        /// <param name="transcoderVideoResolutions">transcoderVideoResolutions</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="updater">updater</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="voiceSearch">voiceSearch</param>
        /// <param name="directory">directory</param>
        [JsonConstructor]
        public GetServerCapabilities200ResponseMediaContainer(Option<decimal?> size = default, Option<bool?> allowCameraUpload = default, Option<bool?> allowChannelAccess = default, Option<bool?> allowMediaDeletion = default, Option<bool?> allowSharing = default, Option<bool?> allowSync = default, Option<bool?> allowTuners = default, Option<bool?> backgroundProcessing = default, Option<bool?> certificate = default, Option<bool?> companionProxy = default, Option<string?> countryCode = default, Option<string?> diagnostics = default, Option<bool?> eventStream = default, Option<string?> friendlyName = default, Option<bool?> hubSearch = default, Option<bool?> itemClusters = default, Option<decimal?> livetv = default, Option<string?> machineIdentifier = default, Option<bool?> mediaProviders = default, Option<bool?> multiuser = default, Option<decimal?> musicAnalysis = default, Option<bool?> myPlex = default, Option<string?> myPlexMappingState = default, Option<string?> myPlexSigninState = default, Option<bool?> myPlexSubscription = default, Option<string?> myPlexUsername = default, Option<decimal?> offlineTranscode = default, Option<string?> ownerFeatures = default, Option<bool?> photoAutoTag = default, Option<string?> platform = default, Option<string?> platformVersion = default, Option<bool?> pluginHost = default, Option<bool?> pushNotifications = default, Option<bool?> readOnlyLibraries = default, Option<decimal?> streamingBrainABRVersion = default, Option<decimal?> streamingBrainVersion = default, Option<bool?> sync = default, Option<decimal?> transcoderActiveVideoSessions = default, Option<bool?> transcoderAudio = default, Option<bool?> transcoderLyrics = default, Option<bool?> transcoderPhoto = default, Option<bool?> transcoderSubtitles = default, Option<bool?> transcoderVideo = default, Option<string?> transcoderVideoBitrates = default, Option<string?> transcoderVideoQualities = default, Option<string?> transcoderVideoResolutions = default, Option<decimal?> updatedAt = default, Option<bool?> updater = default, Option<string?> varVersion = default, Option<bool?> voiceSearch = default, Option<List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>?> directory = default)
        {
            SizeOption = size;
            AllowCameraUploadOption = allowCameraUpload;
            AllowChannelAccessOption = allowChannelAccess;
            AllowMediaDeletionOption = allowMediaDeletion;
            AllowSharingOption = allowSharing;
            AllowSyncOption = allowSync;
            AllowTunersOption = allowTuners;
            BackgroundProcessingOption = backgroundProcessing;
            CertificateOption = certificate;
            CompanionProxyOption = companionProxy;
            CountryCodeOption = countryCode;
            DiagnosticsOption = diagnostics;
            EventStreamOption = eventStream;
            FriendlyNameOption = friendlyName;
            HubSearchOption = hubSearch;
            ItemClustersOption = itemClusters;
            LivetvOption = livetv;
            MachineIdentifierOption = machineIdentifier;
            MediaProvidersOption = mediaProviders;
            MultiuserOption = multiuser;
            MusicAnalysisOption = musicAnalysis;
            MyPlexOption = myPlex;
            MyPlexMappingStateOption = myPlexMappingState;
            MyPlexSigninStateOption = myPlexSigninState;
            MyPlexSubscriptionOption = myPlexSubscription;
            MyPlexUsernameOption = myPlexUsername;
            OfflineTranscodeOption = offlineTranscode;
            OwnerFeaturesOption = ownerFeatures;
            PhotoAutoTagOption = photoAutoTag;
            PlatformOption = platform;
            PlatformVersionOption = platformVersion;
            PluginHostOption = pluginHost;
            PushNotificationsOption = pushNotifications;
            ReadOnlyLibrariesOption = readOnlyLibraries;
            StreamingBrainABRVersionOption = streamingBrainABRVersion;
            StreamingBrainVersionOption = streamingBrainVersion;
            SyncOption = sync;
            TranscoderActiveVideoSessionsOption = transcoderActiveVideoSessions;
            TranscoderAudioOption = transcoderAudio;
            TranscoderLyricsOption = transcoderLyrics;
            TranscoderPhotoOption = transcoderPhoto;
            TranscoderSubtitlesOption = transcoderSubtitles;
            TranscoderVideoOption = transcoderVideo;
            TranscoderVideoBitratesOption = transcoderVideoBitrates;
            TranscoderVideoQualitiesOption = transcoderVideoQualities;
            TranscoderVideoResolutionsOption = transcoderVideoResolutions;
            UpdatedAtOption = updatedAt;
            UpdaterOption = updater;
            VarVersionOption = varVersion;
            VoiceSearchOption = voiceSearch;
            DirectoryOption = directory;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public decimal? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowCameraUpload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowCameraUploadOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowCameraUpload
        /// </summary>
        [JsonPropertyName("allowCameraUpload")]
        public bool? AllowCameraUpload { get { return this.AllowCameraUploadOption; } set { this.AllowCameraUploadOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowChannelAccess
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowChannelAccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowChannelAccess
        /// </summary>
        [JsonPropertyName("allowChannelAccess")]
        public bool? AllowChannelAccess { get { return this.AllowChannelAccessOption; } set { this.AllowChannelAccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowMediaDeletion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMediaDeletionOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMediaDeletion
        /// </summary>
        [JsonPropertyName("allowMediaDeletion")]
        public bool? AllowMediaDeletion { get { return this.AllowMediaDeletionOption; } set { this.AllowMediaDeletionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowSharing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowSharingOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowSharing
        /// </summary>
        [JsonPropertyName("allowSharing")]
        public bool? AllowSharing { get { return this.AllowSharingOption; } set { this.AllowSharingOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowSync
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowSyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowSync
        /// </summary>
        [JsonPropertyName("allowSync")]
        public bool? AllowSync { get { return this.AllowSyncOption; } set { this.AllowSyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowTuners
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowTunersOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowTuners
        /// </summary>
        [JsonPropertyName("allowTuners")]
        public bool? AllowTuners { get { return this.AllowTunersOption; } set { this.AllowTunersOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackgroundProcessing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BackgroundProcessingOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundProcessing
        /// </summary>
        [JsonPropertyName("backgroundProcessing")]
        public bool? BackgroundProcessing { get { return this.BackgroundProcessingOption; } set { this.BackgroundProcessingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Certificate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CertificateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [JsonPropertyName("certificate")]
        public bool? Certificate { get { return this.CertificateOption; } set { this.CertificateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompanionProxy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CompanionProxyOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompanionProxy
        /// </summary>
        [JsonPropertyName("companionProxy")]
        public bool? CompanionProxy { get { return this.CompanionProxyOption; } set { this.CompanionProxyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Diagnostics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiagnosticsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Diagnostics
        /// </summary>
        [JsonPropertyName("diagnostics")]
        public string? Diagnostics { get { return this.DiagnosticsOption; } set { this.DiagnosticsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventStream
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EventStreamOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventStream
        /// </summary>
        [JsonPropertyName("eventStream")]
        public bool? EventStream { get { return this.EventStreamOption; } set { this.EventStreamOption = new(value); } }

        /// <summary>
        /// Used to track the state of FriendlyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FriendlyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FriendlyName
        /// </summary>
        [JsonPropertyName("friendlyName")]
        public string? FriendlyName { get { return this.FriendlyNameOption; } set { this.FriendlyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of HubSearch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HubSearchOption { get; private set; }

        /// <summary>
        /// Gets or Sets HubSearch
        /// </summary>
        [JsonPropertyName("hubSearch")]
        public bool? HubSearch { get { return this.HubSearchOption; } set { this.HubSearchOption = new(value); } }

        /// <summary>
        /// Used to track the state of ItemClusters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ItemClustersOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemClusters
        /// </summary>
        [JsonPropertyName("itemClusters")]
        public bool? ItemClusters { get { return this.ItemClustersOption; } set { this.ItemClustersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Livetv
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LivetvOption { get; private set; }

        /// <summary>
        /// Gets or Sets Livetv
        /// </summary>
        [JsonPropertyName("livetv")]
        public decimal? Livetv { get { return this.LivetvOption; } set { this.LivetvOption = new(value); } }

        /// <summary>
        /// Used to track the state of MachineIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MachineIdentifierOption { get; private set; }

        /// <summary>
        /// Gets or Sets MachineIdentifier
        /// </summary>
        [JsonPropertyName("machineIdentifier")]
        public string? MachineIdentifier { get { return this.MachineIdentifierOption; } set { this.MachineIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaProviders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MediaProvidersOption { get; private set; }

        /// <summary>
        /// Gets or Sets MediaProviders
        /// </summary>
        [JsonPropertyName("mediaProviders")]
        public bool? MediaProviders { get { return this.MediaProvidersOption; } set { this.MediaProvidersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Multiuser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MultiuserOption { get; private set; }

        /// <summary>
        /// Gets or Sets Multiuser
        /// </summary>
        [JsonPropertyName("multiuser")]
        public bool? Multiuser { get { return this.MultiuserOption; } set { this.MultiuserOption = new(value); } }

        /// <summary>
        /// Used to track the state of MusicAnalysis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MusicAnalysisOption { get; private set; }

        /// <summary>
        /// Gets or Sets MusicAnalysis
        /// </summary>
        [JsonPropertyName("musicAnalysis")]
        public decimal? MusicAnalysis { get { return this.MusicAnalysisOption; } set { this.MusicAnalysisOption = new(value); } }

        /// <summary>
        /// Used to track the state of MyPlex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MyPlexOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyPlex
        /// </summary>
        [JsonPropertyName("myPlex")]
        public bool? MyPlex { get { return this.MyPlexOption; } set { this.MyPlexOption = new(value); } }

        /// <summary>
        /// Used to track the state of MyPlexMappingState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MyPlexMappingStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyPlexMappingState
        /// </summary>
        [JsonPropertyName("myPlexMappingState")]
        public string? MyPlexMappingState { get { return this.MyPlexMappingStateOption; } set { this.MyPlexMappingStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MyPlexSigninState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MyPlexSigninStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyPlexSigninState
        /// </summary>
        [JsonPropertyName("myPlexSigninState")]
        public string? MyPlexSigninState { get { return this.MyPlexSigninStateOption; } set { this.MyPlexSigninStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MyPlexSubscription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MyPlexSubscriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyPlexSubscription
        /// </summary>
        [JsonPropertyName("myPlexSubscription")]
        public bool? MyPlexSubscription { get { return this.MyPlexSubscriptionOption; } set { this.MyPlexSubscriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MyPlexUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MyPlexUsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyPlexUsername
        /// </summary>
        [JsonPropertyName("myPlexUsername")]
        public string? MyPlexUsername { get { return this.MyPlexUsernameOption; } set { this.MyPlexUsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfflineTranscode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> OfflineTranscodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OfflineTranscode
        /// </summary>
        [JsonPropertyName("offlineTranscode")]
        public decimal? OfflineTranscode { get { return this.OfflineTranscodeOption; } set { this.OfflineTranscodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of OwnerFeatures
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OwnerFeaturesOption { get; private set; }

        /// <summary>
        /// Gets or Sets OwnerFeatures
        /// </summary>
        [JsonPropertyName("ownerFeatures")]
        public string? OwnerFeatures { get { return this.OwnerFeaturesOption; } set { this.OwnerFeaturesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhotoAutoTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PhotoAutoTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhotoAutoTag
        /// </summary>
        [JsonPropertyName("photoAutoTag")]
        public bool? PhotoAutoTag { get { return this.PhotoAutoTagOption; } set { this.PhotoAutoTagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformOption { get; private set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [JsonPropertyName("platform")]
        public string? Platform { get { return this.PlatformOption; } set { this.PlatformOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlatformVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlatformVersion
        /// </summary>
        [JsonPropertyName("platformVersion")]
        public string? PlatformVersion { get { return this.PlatformVersionOption; } set { this.PlatformVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of PluginHost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PluginHostOption { get; private set; }

        /// <summary>
        /// Gets or Sets PluginHost
        /// </summary>
        [JsonPropertyName("pluginHost")]
        public bool? PluginHost { get { return this.PluginHostOption; } set { this.PluginHostOption = new(value); } }

        /// <summary>
        /// Used to track the state of PushNotifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PushNotificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PushNotifications
        /// </summary>
        [JsonPropertyName("pushNotifications")]
        public bool? PushNotifications { get { return this.PushNotificationsOption; } set { this.PushNotificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadOnlyLibraries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReadOnlyLibrariesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadOnlyLibraries
        /// </summary>
        [JsonPropertyName("readOnlyLibraries")]
        public bool? ReadOnlyLibraries { get { return this.ReadOnlyLibrariesOption; } set { this.ReadOnlyLibrariesOption = new(value); } }

        /// <summary>
        /// Used to track the state of StreamingBrainABRVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StreamingBrainABRVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets StreamingBrainABRVersion
        /// </summary>
        [JsonPropertyName("streamingBrainABRVersion")]
        public decimal? StreamingBrainABRVersion { get { return this.StreamingBrainABRVersionOption; } set { this.StreamingBrainABRVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of StreamingBrainVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StreamingBrainVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets StreamingBrainVersion
        /// </summary>
        [JsonPropertyName("streamingBrainVersion")]
        public decimal? StreamingBrainVersion { get { return this.StreamingBrainVersionOption; } set { this.StreamingBrainVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sync
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sync
        /// </summary>
        [JsonPropertyName("sync")]
        public bool? Sync { get { return this.SyncOption; } set { this.SyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderActiveVideoSessions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TranscoderActiveVideoSessionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderActiveVideoSessions
        /// </summary>
        [JsonPropertyName("transcoderActiveVideoSessions")]
        public decimal? TranscoderActiveVideoSessions { get { return this.TranscoderActiveVideoSessionsOption; } set { this.TranscoderActiveVideoSessionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderAudio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscoderAudioOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderAudio
        /// </summary>
        [JsonPropertyName("transcoderAudio")]
        public bool? TranscoderAudio { get { return this.TranscoderAudioOption; } set { this.TranscoderAudioOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderLyrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscoderLyricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderLyrics
        /// </summary>
        [JsonPropertyName("transcoderLyrics")]
        public bool? TranscoderLyrics { get { return this.TranscoderLyricsOption; } set { this.TranscoderLyricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderPhoto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscoderPhotoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderPhoto
        /// </summary>
        [JsonPropertyName("transcoderPhoto")]
        public bool? TranscoderPhoto { get { return this.TranscoderPhotoOption; } set { this.TranscoderPhotoOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderSubtitles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscoderSubtitlesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderSubtitles
        /// </summary>
        [JsonPropertyName("transcoderSubtitles")]
        public bool? TranscoderSubtitles { get { return this.TranscoderSubtitlesOption; } set { this.TranscoderSubtitlesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderVideo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscoderVideoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderVideo
        /// </summary>
        [JsonPropertyName("transcoderVideo")]
        public bool? TranscoderVideo { get { return this.TranscoderVideoOption; } set { this.TranscoderVideoOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderVideoBitrates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TranscoderVideoBitratesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderVideoBitrates
        /// </summary>
        [JsonPropertyName("transcoderVideoBitrates")]
        public string? TranscoderVideoBitrates { get { return this.TranscoderVideoBitratesOption; } set { this.TranscoderVideoBitratesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderVideoQualities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TranscoderVideoQualitiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderVideoQualities
        /// </summary>
        [JsonPropertyName("transcoderVideoQualities")]
        public string? TranscoderVideoQualities { get { return this.TranscoderVideoQualitiesOption; } set { this.TranscoderVideoQualitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscoderVideoResolutions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TranscoderVideoResolutionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscoderVideoResolutions
        /// </summary>
        [JsonPropertyName("transcoderVideoResolutions")]
        public string? TranscoderVideoResolutions { get { return this.TranscoderVideoResolutionsOption; } set { this.TranscoderVideoResolutionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public decimal? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Updater
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UpdaterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Updater
        /// </summary>
        [JsonPropertyName("updater")]
        public bool? Updater { get { return this.UpdaterOption; } set { this.UpdaterOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoiceSearch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VoiceSearchOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoiceSearch
        /// </summary>
        [JsonPropertyName("voiceSearch")]
        public bool? VoiceSearch { get { return this.VoiceSearchOption; } set { this.VoiceSearchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Directory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>?> DirectoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [JsonPropertyName("Directory")]
        public List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>? Directory { get { return this.DirectoryOption; } set { this.DirectoryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetServerCapabilities200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AllowCameraUpload: ").Append(AllowCameraUpload).Append("\n");
            sb.Append("  AllowChannelAccess: ").Append(AllowChannelAccess).Append("\n");
            sb.Append("  AllowMediaDeletion: ").Append(AllowMediaDeletion).Append("\n");
            sb.Append("  AllowSharing: ").Append(AllowSharing).Append("\n");
            sb.Append("  AllowSync: ").Append(AllowSync).Append("\n");
            sb.Append("  AllowTuners: ").Append(AllowTuners).Append("\n");
            sb.Append("  BackgroundProcessing: ").Append(BackgroundProcessing).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  CompanionProxy: ").Append(CompanionProxy).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Diagnostics: ").Append(Diagnostics).Append("\n");
            sb.Append("  EventStream: ").Append(EventStream).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  HubSearch: ").Append(HubSearch).Append("\n");
            sb.Append("  ItemClusters: ").Append(ItemClusters).Append("\n");
            sb.Append("  Livetv: ").Append(Livetv).Append("\n");
            sb.Append("  MachineIdentifier: ").Append(MachineIdentifier).Append("\n");
            sb.Append("  MediaProviders: ").Append(MediaProviders).Append("\n");
            sb.Append("  Multiuser: ").Append(Multiuser).Append("\n");
            sb.Append("  MusicAnalysis: ").Append(MusicAnalysis).Append("\n");
            sb.Append("  MyPlex: ").Append(MyPlex).Append("\n");
            sb.Append("  MyPlexMappingState: ").Append(MyPlexMappingState).Append("\n");
            sb.Append("  MyPlexSigninState: ").Append(MyPlexSigninState).Append("\n");
            sb.Append("  MyPlexSubscription: ").Append(MyPlexSubscription).Append("\n");
            sb.Append("  MyPlexUsername: ").Append(MyPlexUsername).Append("\n");
            sb.Append("  OfflineTranscode: ").Append(OfflineTranscode).Append("\n");
            sb.Append("  OwnerFeatures: ").Append(OwnerFeatures).Append("\n");
            sb.Append("  PhotoAutoTag: ").Append(PhotoAutoTag).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  PlatformVersion: ").Append(PlatformVersion).Append("\n");
            sb.Append("  PluginHost: ").Append(PluginHost).Append("\n");
            sb.Append("  PushNotifications: ").Append(PushNotifications).Append("\n");
            sb.Append("  ReadOnlyLibraries: ").Append(ReadOnlyLibraries).Append("\n");
            sb.Append("  StreamingBrainABRVersion: ").Append(StreamingBrainABRVersion).Append("\n");
            sb.Append("  StreamingBrainVersion: ").Append(StreamingBrainVersion).Append("\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("  TranscoderActiveVideoSessions: ").Append(TranscoderActiveVideoSessions).Append("\n");
            sb.Append("  TranscoderAudio: ").Append(TranscoderAudio).Append("\n");
            sb.Append("  TranscoderLyrics: ").Append(TranscoderLyrics).Append("\n");
            sb.Append("  TranscoderPhoto: ").Append(TranscoderPhoto).Append("\n");
            sb.Append("  TranscoderSubtitles: ").Append(TranscoderSubtitles).Append("\n");
            sb.Append("  TranscoderVideo: ").Append(TranscoderVideo).Append("\n");
            sb.Append("  TranscoderVideoBitrates: ").Append(TranscoderVideoBitrates).Append("\n");
            sb.Append("  TranscoderVideoQualities: ").Append(TranscoderVideoQualities).Append("\n");
            sb.Append("  TranscoderVideoResolutions: ").Append(TranscoderVideoResolutions).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Updater: ").Append(Updater).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VoiceSearch: ").Append(VoiceSearch).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetServerCapabilities200ResponseMediaContainer" />
    /// </summary>
    public class GetServerCapabilities200ResponseMediaContainerJsonConverter : JsonConverter<GetServerCapabilities200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetServerCapabilities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetServerCapabilities200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> size = default;
            Option<bool?> allowCameraUpload = default;
            Option<bool?> allowChannelAccess = default;
            Option<bool?> allowMediaDeletion = default;
            Option<bool?> allowSharing = default;
            Option<bool?> allowSync = default;
            Option<bool?> allowTuners = default;
            Option<bool?> backgroundProcessing = default;
            Option<bool?> certificate = default;
            Option<bool?> companionProxy = default;
            Option<string?> countryCode = default;
            Option<string?> diagnostics = default;
            Option<bool?> eventStream = default;
            Option<string?> friendlyName = default;
            Option<bool?> hubSearch = default;
            Option<bool?> itemClusters = default;
            Option<decimal?> livetv = default;
            Option<string?> machineIdentifier = default;
            Option<bool?> mediaProviders = default;
            Option<bool?> multiuser = default;
            Option<decimal?> musicAnalysis = default;
            Option<bool?> myPlex = default;
            Option<string?> myPlexMappingState = default;
            Option<string?> myPlexSigninState = default;
            Option<bool?> myPlexSubscription = default;
            Option<string?> myPlexUsername = default;
            Option<decimal?> offlineTranscode = default;
            Option<string?> ownerFeatures = default;
            Option<bool?> photoAutoTag = default;
            Option<string?> platform = default;
            Option<string?> platformVersion = default;
            Option<bool?> pluginHost = default;
            Option<bool?> pushNotifications = default;
            Option<bool?> readOnlyLibraries = default;
            Option<decimal?> streamingBrainABRVersion = default;
            Option<decimal?> streamingBrainVersion = default;
            Option<bool?> sync = default;
            Option<decimal?> transcoderActiveVideoSessions = default;
            Option<bool?> transcoderAudio = default;
            Option<bool?> transcoderLyrics = default;
            Option<bool?> transcoderPhoto = default;
            Option<bool?> transcoderSubtitles = default;
            Option<bool?> transcoderVideo = default;
            Option<string?> transcoderVideoBitrates = default;
            Option<string?> transcoderVideoQualities = default;
            Option<string?> transcoderVideoResolutions = default;
            Option<decimal?> updatedAt = default;
            Option<bool?> updater = default;
            Option<string?> varVersion = default;
            Option<bool?> voiceSearch = default;
            Option<List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>?> directory = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            size = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "allowCameraUpload":
                            allowCameraUpload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowChannelAccess":
                            allowChannelAccess = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowMediaDeletion":
                            allowMediaDeletion = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowSharing":
                            allowSharing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowSync":
                            allowSync = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowTuners":
                            allowTuners = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "backgroundProcessing":
                            backgroundProcessing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "certificate":
                            certificate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "companionProxy":
                            companionProxy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diagnostics":
                            diagnostics = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventStream":
                            eventStream = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "friendlyName":
                            friendlyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hubSearch":
                            hubSearch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "itemClusters":
                            itemClusters = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "livetv":
                            livetv = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "machineIdentifier":
                            machineIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mediaProviders":
                            mediaProviders = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "multiuser":
                            multiuser = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "musicAnalysis":
                            musicAnalysis = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "myPlex":
                            myPlex = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "myPlexMappingState":
                            myPlexMappingState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "myPlexSigninState":
                            myPlexSigninState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "myPlexSubscription":
                            myPlexSubscription = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "myPlexUsername":
                            myPlexUsername = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "offlineTranscode":
                            offlineTranscode = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "ownerFeatures":
                            ownerFeatures = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "photoAutoTag":
                            photoAutoTag = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "platform":
                            platform = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "platformVersion":
                            platformVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pluginHost":
                            pluginHost = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pushNotifications":
                            pushNotifications = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "readOnlyLibraries":
                            readOnlyLibraries = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "streamingBrainABRVersion":
                            streamingBrainABRVersion = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "streamingBrainVersion":
                            streamingBrainVersion = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "sync":
                            sync = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderActiveVideoSessions":
                            transcoderActiveVideoSessions = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "transcoderAudio":
                            transcoderAudio = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderLyrics":
                            transcoderLyrics = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderPhoto":
                            transcoderPhoto = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderSubtitles":
                            transcoderSubtitles = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderVideo":
                            transcoderVideo = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "transcoderVideoBitrates":
                            transcoderVideoBitrates = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transcoderVideoQualities":
                            transcoderVideoQualities = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transcoderVideoResolutions":
                            transcoderVideoResolutions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "updater":
                            updater = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "voiceSearch":
                            voiceSearch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "Directory":
                            directory = new Option<List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>?>(JsonSerializer.Deserialize<List<GetServerCapabilities200ResponseMediaContainerDirectoryInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowCameraUpload.IsSet && allowCameraUpload.Value == null)
                throw new ArgumentNullException(nameof(allowCameraUpload), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowChannelAccess.IsSet && allowChannelAccess.Value == null)
                throw new ArgumentNullException(nameof(allowChannelAccess), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowMediaDeletion.IsSet && allowMediaDeletion.Value == null)
                throw new ArgumentNullException(nameof(allowMediaDeletion), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowSharing.IsSet && allowSharing.Value == null)
                throw new ArgumentNullException(nameof(allowSharing), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowSync.IsSet && allowSync.Value == null)
                throw new ArgumentNullException(nameof(allowSync), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (allowTuners.IsSet && allowTuners.Value == null)
                throw new ArgumentNullException(nameof(allowTuners), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (backgroundProcessing.IsSet && backgroundProcessing.Value == null)
                throw new ArgumentNullException(nameof(backgroundProcessing), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (certificate.IsSet && certificate.Value == null)
                throw new ArgumentNullException(nameof(certificate), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (companionProxy.IsSet && companionProxy.Value == null)
                throw new ArgumentNullException(nameof(companionProxy), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (diagnostics.IsSet && diagnostics.Value == null)
                throw new ArgumentNullException(nameof(diagnostics), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (eventStream.IsSet && eventStream.Value == null)
                throw new ArgumentNullException(nameof(eventStream), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (friendlyName.IsSet && friendlyName.Value == null)
                throw new ArgumentNullException(nameof(friendlyName), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (hubSearch.IsSet && hubSearch.Value == null)
                throw new ArgumentNullException(nameof(hubSearch), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (itemClusters.IsSet && itemClusters.Value == null)
                throw new ArgumentNullException(nameof(itemClusters), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (livetv.IsSet && livetv.Value == null)
                throw new ArgumentNullException(nameof(livetv), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (machineIdentifier.IsSet && machineIdentifier.Value == null)
                throw new ArgumentNullException(nameof(machineIdentifier), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (mediaProviders.IsSet && mediaProviders.Value == null)
                throw new ArgumentNullException(nameof(mediaProviders), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (multiuser.IsSet && multiuser.Value == null)
                throw new ArgumentNullException(nameof(multiuser), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (musicAnalysis.IsSet && musicAnalysis.Value == null)
                throw new ArgumentNullException(nameof(musicAnalysis), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (myPlex.IsSet && myPlex.Value == null)
                throw new ArgumentNullException(nameof(myPlex), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (myPlexMappingState.IsSet && myPlexMappingState.Value == null)
                throw new ArgumentNullException(nameof(myPlexMappingState), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (myPlexSigninState.IsSet && myPlexSigninState.Value == null)
                throw new ArgumentNullException(nameof(myPlexSigninState), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (myPlexSubscription.IsSet && myPlexSubscription.Value == null)
                throw new ArgumentNullException(nameof(myPlexSubscription), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (myPlexUsername.IsSet && myPlexUsername.Value == null)
                throw new ArgumentNullException(nameof(myPlexUsername), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (offlineTranscode.IsSet && offlineTranscode.Value == null)
                throw new ArgumentNullException(nameof(offlineTranscode), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (ownerFeatures.IsSet && ownerFeatures.Value == null)
                throw new ArgumentNullException(nameof(ownerFeatures), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (photoAutoTag.IsSet && photoAutoTag.Value == null)
                throw new ArgumentNullException(nameof(photoAutoTag), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (platformVersion.IsSet && platformVersion.Value == null)
                throw new ArgumentNullException(nameof(platformVersion), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (pluginHost.IsSet && pluginHost.Value == null)
                throw new ArgumentNullException(nameof(pluginHost), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (pushNotifications.IsSet && pushNotifications.Value == null)
                throw new ArgumentNullException(nameof(pushNotifications), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (readOnlyLibraries.IsSet && readOnlyLibraries.Value == null)
                throw new ArgumentNullException(nameof(readOnlyLibraries), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (streamingBrainABRVersion.IsSet && streamingBrainABRVersion.Value == null)
                throw new ArgumentNullException(nameof(streamingBrainABRVersion), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (streamingBrainVersion.IsSet && streamingBrainVersion.Value == null)
                throw new ArgumentNullException(nameof(streamingBrainVersion), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (sync.IsSet && sync.Value == null)
                throw new ArgumentNullException(nameof(sync), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderActiveVideoSessions.IsSet && transcoderActiveVideoSessions.Value == null)
                throw new ArgumentNullException(nameof(transcoderActiveVideoSessions), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderAudio.IsSet && transcoderAudio.Value == null)
                throw new ArgumentNullException(nameof(transcoderAudio), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderLyrics.IsSet && transcoderLyrics.Value == null)
                throw new ArgumentNullException(nameof(transcoderLyrics), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderPhoto.IsSet && transcoderPhoto.Value == null)
                throw new ArgumentNullException(nameof(transcoderPhoto), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderSubtitles.IsSet && transcoderSubtitles.Value == null)
                throw new ArgumentNullException(nameof(transcoderSubtitles), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderVideo.IsSet && transcoderVideo.Value == null)
                throw new ArgumentNullException(nameof(transcoderVideo), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderVideoBitrates.IsSet && transcoderVideoBitrates.Value == null)
                throw new ArgumentNullException(nameof(transcoderVideoBitrates), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderVideoQualities.IsSet && transcoderVideoQualities.Value == null)
                throw new ArgumentNullException(nameof(transcoderVideoQualities), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (transcoderVideoResolutions.IsSet && transcoderVideoResolutions.Value == null)
                throw new ArgumentNullException(nameof(transcoderVideoResolutions), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (updater.IsSet && updater.Value == null)
                throw new ArgumentNullException(nameof(updater), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (voiceSearch.IsSet && voiceSearch.Value == null)
                throw new ArgumentNullException(nameof(voiceSearch), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            if (directory.IsSet && directory.Value == null)
                throw new ArgumentNullException(nameof(directory), "Property is not nullable for class GetServerCapabilities200ResponseMediaContainer.");

            return new GetServerCapabilities200ResponseMediaContainer(size, allowCameraUpload, allowChannelAccess, allowMediaDeletion, allowSharing, allowSync, allowTuners, backgroundProcessing, certificate, companionProxy, countryCode, diagnostics, eventStream, friendlyName, hubSearch, itemClusters, livetv, machineIdentifier, mediaProviders, multiuser, musicAnalysis, myPlex, myPlexMappingState, myPlexSigninState, myPlexSubscription, myPlexUsername, offlineTranscode, ownerFeatures, photoAutoTag, platform, platformVersion, pluginHost, pushNotifications, readOnlyLibraries, streamingBrainABRVersion, streamingBrainVersion, sync, transcoderActiveVideoSessions, transcoderAudio, transcoderLyrics, transcoderPhoto, transcoderSubtitles, transcoderVideo, transcoderVideoBitrates, transcoderVideoQualities, transcoderVideoResolutions, updatedAt, updater, varVersion, voiceSearch, directory);
        }

        /// <summary>
        /// Serializes a <see cref="GetServerCapabilities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerCapabilities200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetServerCapabilities200ResponseMediaContainer getServerCapabilities200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getServerCapabilities200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetServerCapabilities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerCapabilities200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetServerCapabilities200ResponseMediaContainer getServerCapabilities200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getServerCapabilities200ResponseMediaContainer.CountryCodeOption.IsSet && getServerCapabilities200ResponseMediaContainer.CountryCode == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.CountryCode), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.DiagnosticsOption.IsSet && getServerCapabilities200ResponseMediaContainer.Diagnostics == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.Diagnostics), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.FriendlyNameOption.IsSet && getServerCapabilities200ResponseMediaContainer.FriendlyName == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.FriendlyName), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.MachineIdentifierOption.IsSet && getServerCapabilities200ResponseMediaContainer.MachineIdentifier == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.MachineIdentifier), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.MyPlexMappingStateOption.IsSet && getServerCapabilities200ResponseMediaContainer.MyPlexMappingState == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.MyPlexMappingState), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.MyPlexSigninStateOption.IsSet && getServerCapabilities200ResponseMediaContainer.MyPlexSigninState == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.MyPlexSigninState), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.MyPlexUsernameOption.IsSet && getServerCapabilities200ResponseMediaContainer.MyPlexUsername == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.MyPlexUsername), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.OwnerFeaturesOption.IsSet && getServerCapabilities200ResponseMediaContainer.OwnerFeatures == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.OwnerFeatures), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.PlatformOption.IsSet && getServerCapabilities200ResponseMediaContainer.Platform == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.Platform), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.PlatformVersionOption.IsSet && getServerCapabilities200ResponseMediaContainer.PlatformVersion == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.PlatformVersion), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoBitratesOption.IsSet && getServerCapabilities200ResponseMediaContainer.TranscoderVideoBitrates == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.TranscoderVideoBitrates), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoQualitiesOption.IsSet && getServerCapabilities200ResponseMediaContainer.TranscoderVideoQualities == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.TranscoderVideoQualities), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoResolutionsOption.IsSet && getServerCapabilities200ResponseMediaContainer.TranscoderVideoResolutions == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.TranscoderVideoResolutions), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.VarVersionOption.IsSet && getServerCapabilities200ResponseMediaContainer.VarVersion == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.VarVersion), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.DirectoryOption.IsSet && getServerCapabilities200ResponseMediaContainer.Directory == null)
                throw new ArgumentNullException(nameof(getServerCapabilities200ResponseMediaContainer.Directory), "Property is required for class GetServerCapabilities200ResponseMediaContainer.");

            if (getServerCapabilities200ResponseMediaContainer.SizeOption.IsSet)
                writer.WriteNumber("size", getServerCapabilities200ResponseMediaContainer.SizeOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowCameraUploadOption.IsSet)
                writer.WriteBoolean("allowCameraUpload", getServerCapabilities200ResponseMediaContainer.AllowCameraUploadOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowChannelAccessOption.IsSet)
                writer.WriteBoolean("allowChannelAccess", getServerCapabilities200ResponseMediaContainer.AllowChannelAccessOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowMediaDeletionOption.IsSet)
                writer.WriteBoolean("allowMediaDeletion", getServerCapabilities200ResponseMediaContainer.AllowMediaDeletionOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowSharingOption.IsSet)
                writer.WriteBoolean("allowSharing", getServerCapabilities200ResponseMediaContainer.AllowSharingOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowSyncOption.IsSet)
                writer.WriteBoolean("allowSync", getServerCapabilities200ResponseMediaContainer.AllowSyncOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.AllowTunersOption.IsSet)
                writer.WriteBoolean("allowTuners", getServerCapabilities200ResponseMediaContainer.AllowTunersOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.BackgroundProcessingOption.IsSet)
                writer.WriteBoolean("backgroundProcessing", getServerCapabilities200ResponseMediaContainer.BackgroundProcessingOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.CertificateOption.IsSet)
                writer.WriteBoolean("certificate", getServerCapabilities200ResponseMediaContainer.CertificateOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.CompanionProxyOption.IsSet)
                writer.WriteBoolean("companionProxy", getServerCapabilities200ResponseMediaContainer.CompanionProxyOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", getServerCapabilities200ResponseMediaContainer.CountryCode);

            if (getServerCapabilities200ResponseMediaContainer.DiagnosticsOption.IsSet)
                writer.WriteString("diagnostics", getServerCapabilities200ResponseMediaContainer.Diagnostics);

            if (getServerCapabilities200ResponseMediaContainer.EventStreamOption.IsSet)
                writer.WriteBoolean("eventStream", getServerCapabilities200ResponseMediaContainer.EventStreamOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.FriendlyNameOption.IsSet)
                writer.WriteString("friendlyName", getServerCapabilities200ResponseMediaContainer.FriendlyName);

            if (getServerCapabilities200ResponseMediaContainer.HubSearchOption.IsSet)
                writer.WriteBoolean("hubSearch", getServerCapabilities200ResponseMediaContainer.HubSearchOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.ItemClustersOption.IsSet)
                writer.WriteBoolean("itemClusters", getServerCapabilities200ResponseMediaContainer.ItemClustersOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.LivetvOption.IsSet)
                writer.WriteNumber("livetv", getServerCapabilities200ResponseMediaContainer.LivetvOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MachineIdentifierOption.IsSet)
                writer.WriteString("machineIdentifier", getServerCapabilities200ResponseMediaContainer.MachineIdentifier);

            if (getServerCapabilities200ResponseMediaContainer.MediaProvidersOption.IsSet)
                writer.WriteBoolean("mediaProviders", getServerCapabilities200ResponseMediaContainer.MediaProvidersOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MultiuserOption.IsSet)
                writer.WriteBoolean("multiuser", getServerCapabilities200ResponseMediaContainer.MultiuserOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MusicAnalysisOption.IsSet)
                writer.WriteNumber("musicAnalysis", getServerCapabilities200ResponseMediaContainer.MusicAnalysisOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MyPlexOption.IsSet)
                writer.WriteBoolean("myPlex", getServerCapabilities200ResponseMediaContainer.MyPlexOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MyPlexMappingStateOption.IsSet)
                writer.WriteString("myPlexMappingState", getServerCapabilities200ResponseMediaContainer.MyPlexMappingState);

            if (getServerCapabilities200ResponseMediaContainer.MyPlexSigninStateOption.IsSet)
                writer.WriteString("myPlexSigninState", getServerCapabilities200ResponseMediaContainer.MyPlexSigninState);

            if (getServerCapabilities200ResponseMediaContainer.MyPlexSubscriptionOption.IsSet)
                writer.WriteBoolean("myPlexSubscription", getServerCapabilities200ResponseMediaContainer.MyPlexSubscriptionOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.MyPlexUsernameOption.IsSet)
                writer.WriteString("myPlexUsername", getServerCapabilities200ResponseMediaContainer.MyPlexUsername);

            if (getServerCapabilities200ResponseMediaContainer.OfflineTranscodeOption.IsSet)
                writer.WriteNumber("offlineTranscode", getServerCapabilities200ResponseMediaContainer.OfflineTranscodeOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.OwnerFeaturesOption.IsSet)
                writer.WriteString("ownerFeatures", getServerCapabilities200ResponseMediaContainer.OwnerFeatures);

            if (getServerCapabilities200ResponseMediaContainer.PhotoAutoTagOption.IsSet)
                writer.WriteBoolean("photoAutoTag", getServerCapabilities200ResponseMediaContainer.PhotoAutoTagOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.PlatformOption.IsSet)
                writer.WriteString("platform", getServerCapabilities200ResponseMediaContainer.Platform);

            if (getServerCapabilities200ResponseMediaContainer.PlatformVersionOption.IsSet)
                writer.WriteString("platformVersion", getServerCapabilities200ResponseMediaContainer.PlatformVersion);

            if (getServerCapabilities200ResponseMediaContainer.PluginHostOption.IsSet)
                writer.WriteBoolean("pluginHost", getServerCapabilities200ResponseMediaContainer.PluginHostOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.PushNotificationsOption.IsSet)
                writer.WriteBoolean("pushNotifications", getServerCapabilities200ResponseMediaContainer.PushNotificationsOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.ReadOnlyLibrariesOption.IsSet)
                writer.WriteBoolean("readOnlyLibraries", getServerCapabilities200ResponseMediaContainer.ReadOnlyLibrariesOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.StreamingBrainABRVersionOption.IsSet)
                writer.WriteNumber("streamingBrainABRVersion", getServerCapabilities200ResponseMediaContainer.StreamingBrainABRVersionOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.StreamingBrainVersionOption.IsSet)
                writer.WriteNumber("streamingBrainVersion", getServerCapabilities200ResponseMediaContainer.StreamingBrainVersionOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.SyncOption.IsSet)
                writer.WriteBoolean("sync", getServerCapabilities200ResponseMediaContainer.SyncOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderActiveVideoSessionsOption.IsSet)
                writer.WriteNumber("transcoderActiveVideoSessions", getServerCapabilities200ResponseMediaContainer.TranscoderActiveVideoSessionsOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderAudioOption.IsSet)
                writer.WriteBoolean("transcoderAudio", getServerCapabilities200ResponseMediaContainer.TranscoderAudioOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderLyricsOption.IsSet)
                writer.WriteBoolean("transcoderLyrics", getServerCapabilities200ResponseMediaContainer.TranscoderLyricsOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderPhotoOption.IsSet)
                writer.WriteBoolean("transcoderPhoto", getServerCapabilities200ResponseMediaContainer.TranscoderPhotoOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderSubtitlesOption.IsSet)
                writer.WriteBoolean("transcoderSubtitles", getServerCapabilities200ResponseMediaContainer.TranscoderSubtitlesOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoOption.IsSet)
                writer.WriteBoolean("transcoderVideo", getServerCapabilities200ResponseMediaContainer.TranscoderVideoOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoBitratesOption.IsSet)
                writer.WriteString("transcoderVideoBitrates", getServerCapabilities200ResponseMediaContainer.TranscoderVideoBitrates);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoQualitiesOption.IsSet)
                writer.WriteString("transcoderVideoQualities", getServerCapabilities200ResponseMediaContainer.TranscoderVideoQualities);

            if (getServerCapabilities200ResponseMediaContainer.TranscoderVideoResolutionsOption.IsSet)
                writer.WriteString("transcoderVideoResolutions", getServerCapabilities200ResponseMediaContainer.TranscoderVideoResolutions);

            if (getServerCapabilities200ResponseMediaContainer.UpdatedAtOption.IsSet)
                writer.WriteNumber("updatedAt", getServerCapabilities200ResponseMediaContainer.UpdatedAtOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.UpdaterOption.IsSet)
                writer.WriteBoolean("updater", getServerCapabilities200ResponseMediaContainer.UpdaterOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.VarVersionOption.IsSet)
                writer.WriteString("version", getServerCapabilities200ResponseMediaContainer.VarVersion);

            if (getServerCapabilities200ResponseMediaContainer.VoiceSearchOption.IsSet)
                writer.WriteBoolean("voiceSearch", getServerCapabilities200ResponseMediaContainer.VoiceSearchOption.Value!.Value);

            if (getServerCapabilities200ResponseMediaContainer.DirectoryOption.IsSet)
            {
                writer.WritePropertyName("Directory");
                JsonSerializer.Serialize(writer, getServerCapabilities200ResponseMediaContainer.Directory, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetServerCapabilities200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetServerCapabilities200ResponseMediaContainer))]
    public partial class GetServerCapabilities200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
