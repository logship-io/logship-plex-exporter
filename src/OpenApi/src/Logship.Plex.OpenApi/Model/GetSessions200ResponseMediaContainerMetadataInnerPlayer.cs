// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessions200ResponseMediaContainerMetadataInnerPlayer
    /// </summary>
    public partial class GetSessions200ResponseMediaContainerMetadataInnerPlayer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessions200ResponseMediaContainerMetadataInnerPlayer" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="device">device</param>
        /// <param name="machineIdentifier">machineIdentifier</param>
        /// <param name="model">model</param>
        /// <param name="platform">platform</param>
        /// <param name="platformVersion">platformVersion</param>
        /// <param name="product">product</param>
        /// <param name="remotePublicAddress">remotePublicAddress</param>
        /// <param name="state">state</param>
        /// <param name="title">title</param>
        /// <param name="vendor">vendor</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="local">local</param>
        /// <param name="relayed">relayed</param>
        /// <param name="secure">secure</param>
        /// <param name="userID">userID</param>
        [JsonConstructor]
        public GetSessions200ResponseMediaContainerMetadataInnerPlayer(Option<string?> address = default, Option<string?> device = default, Option<string?> machineIdentifier = default, Option<string?> model = default, Option<string?> platform = default, Option<string?> platformVersion = default, Option<string?> product = default, Option<string?> remotePublicAddress = default, Option<string?> state = default, Option<string?> title = default, Option<string?> vendor = default, Option<string?> varVersion = default, Option<bool?> local = default, Option<bool?> relayed = default, Option<bool?> secure = default, Option<int?> userID = default)
        {
            AddressOption = address;
            DeviceOption = device;
            MachineIdentifierOption = machineIdentifier;
            ModelOption = model;
            PlatformOption = platform;
            PlatformVersionOption = platformVersion;
            ProductOption = product;
            RemotePublicAddressOption = remotePublicAddress;
            StateOption = state;
            TitleOption = title;
            VendorOption = vendor;
            VarVersionOption = varVersion;
            LocalOption = local;
            RelayedOption = relayed;
            SecureOption = secure;
            UserIDOption = userID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Device
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [JsonPropertyName("device")]
        public string? Device { get { return this.DeviceOption; } set { this.DeviceOption = new(value); } }

        /// <summary>
        /// Used to track the state of MachineIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MachineIdentifierOption { get; private set; }

        /// <summary>
        /// Gets or Sets MachineIdentifier
        /// </summary>
        [JsonPropertyName("machineIdentifier")]
        public string? MachineIdentifier { get { return this.MachineIdentifierOption; } set { this.MachineIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformOption { get; private set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [JsonPropertyName("platform")]
        public string? Platform { get { return this.PlatformOption; } set { this.PlatformOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlatformVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlatformVersion
        /// </summary>
        [JsonPropertyName("platformVersion")]
        public string? PlatformVersion { get { return this.PlatformVersionOption; } set { this.PlatformVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Product
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductOption { get; private set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [JsonPropertyName("product")]
        public string? Product { get { return this.ProductOption; } set { this.ProductOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemotePublicAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemotePublicAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemotePublicAddress
        /// </summary>
        [JsonPropertyName("remotePublicAddress")]
        public string? RemotePublicAddress { get { return this.RemotePublicAddressOption; } set { this.RemotePublicAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vendor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VendorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [JsonPropertyName("vendor")]
        public string? Vendor { get { return this.VendorOption; } set { this.VendorOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Local
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LocalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [JsonPropertyName("local")]
        public bool? Local { get { return this.LocalOption; } set { this.LocalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Relayed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RelayedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Relayed
        /// </summary>
        [JsonPropertyName("relayed")]
        public bool? Relayed { get { return this.RelayedOption; } set { this.RelayedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Secure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SecureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [JsonPropertyName("secure")]
        public bool? Secure { get { return this.SecureOption; } set { this.SecureOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UserIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [JsonPropertyName("userID")]
        public int? UserID { get { return this.UserIDOption; } set { this.UserIDOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessions200ResponseMediaContainerMetadataInnerPlayer {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  MachineIdentifier: ").Append(MachineIdentifier).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  PlatformVersion: ").Append(PlatformVersion).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  RemotePublicAddress: ").Append(RemotePublicAddress).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Relayed: ").Append(Relayed).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessions200ResponseMediaContainerMetadataInnerPlayer" />
    /// </summary>
    public class GetSessions200ResponseMediaContainerMetadataInnerPlayerJsonConverter : JsonConverter<GetSessions200ResponseMediaContainerMetadataInnerPlayer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessions200ResponseMediaContainerMetadataInnerPlayer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessions200ResponseMediaContainerMetadataInnerPlayer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<string?> device = default;
            Option<string?> machineIdentifier = default;
            Option<string?> model = default;
            Option<string?> platform = default;
            Option<string?> platformVersion = default;
            Option<string?> product = default;
            Option<string?> remotePublicAddress = default;
            Option<string?> state = default;
            Option<string?> title = default;
            Option<string?> vendor = default;
            Option<string?> varVersion = default;
            Option<bool?> local = default;
            Option<bool?> relayed = default;
            Option<bool?> secure = default;
            Option<int?> userID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "device":
                            device = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "machineIdentifier":
                            machineIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "platform":
                            platform = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "platformVersion":
                            platformVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "product":
                            product = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remotePublicAddress":
                            remotePublicAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "vendor":
                            vendor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "local":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                local = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "relayed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                relayed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "secure":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                secure = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "userID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userID = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (device.IsSet && device.Value == null)
                throw new ArgumentNullException(nameof(device), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (machineIdentifier.IsSet && machineIdentifier.Value == null)
                throw new ArgumentNullException(nameof(machineIdentifier), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (model.IsSet && model.Value == null)
                throw new ArgumentNullException(nameof(model), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (platformVersion.IsSet && platformVersion.Value == null)
                throw new ArgumentNullException(nameof(platformVersion), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (product.IsSet && product.Value == null)
                throw new ArgumentNullException(nameof(product), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (remotePublicAddress.IsSet && remotePublicAddress.Value == null)
                throw new ArgumentNullException(nameof(remotePublicAddress), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (vendor.IsSet && vendor.Value == null)
                throw new ArgumentNullException(nameof(vendor), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (local.IsSet && local.Value == null)
                throw new ArgumentNullException(nameof(local), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (relayed.IsSet && relayed.Value == null)
                throw new ArgumentNullException(nameof(relayed), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (secure.IsSet && secure.Value == null)
                throw new ArgumentNullException(nameof(secure), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (userID.IsSet && userID.Value == null)
                throw new ArgumentNullException(nameof(userID), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            return new GetSessions200ResponseMediaContainerMetadataInnerPlayer(address, device, machineIdentifier, model, platform, platformVersion, product, remotePublicAddress, state, title, vendor, varVersion, local, relayed, secure, userID);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessions200ResponseMediaContainerMetadataInnerPlayer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerPlayer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerPlayer getSessions200ResponseMediaContainerMetadataInnerPlayer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessions200ResponseMediaContainerMetadataInnerPlayer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessions200ResponseMediaContainerMetadataInnerPlayer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerPlayer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerPlayer getSessions200ResponseMediaContainerMetadataInnerPlayer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.AddressOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Address == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Address), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.DeviceOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Device == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Device), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.MachineIdentifierOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.MachineIdentifier == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.MachineIdentifier), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.ModelOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Model == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Model), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Platform == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Platform), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformVersionOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformVersion == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformVersion), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.ProductOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Product == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Product), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.RemotePublicAddressOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.RemotePublicAddress == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.RemotePublicAddress), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.StateOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.State == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.State), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.TitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Title == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Title), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.VendorOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.Vendor == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.Vendor), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.VarVersionOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerPlayer.VarVersion == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerPlayer.VarVersion), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerPlayer.");

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.AddressOption.IsSet)
                writer.WriteString("address", getSessions200ResponseMediaContainerMetadataInnerPlayer.Address);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.DeviceOption.IsSet)
                writer.WriteString("device", getSessions200ResponseMediaContainerMetadataInnerPlayer.Device);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.MachineIdentifierOption.IsSet)
                writer.WriteString("machineIdentifier", getSessions200ResponseMediaContainerMetadataInnerPlayer.MachineIdentifier);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.ModelOption.IsSet)
                writer.WriteString("model", getSessions200ResponseMediaContainerMetadataInnerPlayer.Model);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformOption.IsSet)
                writer.WriteString("platform", getSessions200ResponseMediaContainerMetadataInnerPlayer.Platform);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformVersionOption.IsSet)
                writer.WriteString("platformVersion", getSessions200ResponseMediaContainerMetadataInnerPlayer.PlatformVersion);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.ProductOption.IsSet)
                writer.WriteString("product", getSessions200ResponseMediaContainerMetadataInnerPlayer.Product);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.RemotePublicAddressOption.IsSet)
                writer.WriteString("remotePublicAddress", getSessions200ResponseMediaContainerMetadataInnerPlayer.RemotePublicAddress);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.StateOption.IsSet)
                writer.WriteString("state", getSessions200ResponseMediaContainerMetadataInnerPlayer.State);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.TitleOption.IsSet)
                writer.WriteString("title", getSessions200ResponseMediaContainerMetadataInnerPlayer.Title);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.VendorOption.IsSet)
                writer.WriteString("vendor", getSessions200ResponseMediaContainerMetadataInnerPlayer.Vendor);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.VarVersionOption.IsSet)
                writer.WriteString("version", getSessions200ResponseMediaContainerMetadataInnerPlayer.VarVersion);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.LocalOption.IsSet)
                writer.WriteBoolean("local", getSessions200ResponseMediaContainerMetadataInnerPlayer.LocalOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.RelayedOption.IsSet)
                writer.WriteBoolean("relayed", getSessions200ResponseMediaContainerMetadataInnerPlayer.RelayedOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.SecureOption.IsSet)
                writer.WriteBoolean("secure", getSessions200ResponseMediaContainerMetadataInnerPlayer.SecureOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerPlayer.UserIDOption.IsSet)
                writer.WriteNumber("userID", getSessions200ResponseMediaContainerMetadataInnerPlayer.UserIDOption.Value!.Value);
        }
    }

    /// <summary>
    /// The GetSessions200ResponseMediaContainerMetadataInnerPlayerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessions200ResponseMediaContainerMetadataInnerPlayer))]
    public partial class GetSessions200ResponseMediaContainerMetadataInnerPlayerSerializationContext : JsonSerializerContext { }
}
