// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetTranscodeSessions200ResponseMediaContainer
    /// </summary>
    public partial class GetTranscodeSessions200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTranscodeSessions200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="transcodeSession">transcodeSession</param>
        [JsonConstructor]
        public GetTranscodeSessions200ResponseMediaContainer(Option<long?> size = default, Option<List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>?> transcodeSession = default)
        {
            SizeOption = size;
            TranscodeSessionOption = transcodeSession;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscodeSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>?> TranscodeSessionOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscodeSession
        /// </summary>
        /* <example>[{&quot;key&quot;:&quot;vv3i2q2lax92qlzul1hbd4bx&quot;,&quot;throttled&quot;:false,&quot;complete&quot;:false,&quot;progress&quot;:1.7999999523162842,&quot;size&quot;:-22,&quot;speed&quot;:25.100000381469727,&quot;error&quot;:false,&quot;duration&quot;:1445695,&quot;remaining&quot;:53,&quot;context&quot;:&quot;streaming&quot;,&quot;sourceVideoCodec&quot;:&quot;h264&quot;,&quot;sourceAudioCodec&quot;:&quot;aac&quot;,&quot;videoDecision&quot;:&quot;transcode&quot;,&quot;audioDecision&quot;:&quot;transcode&quot;,&quot;subtitleDecision&quot;:&quot;burn&quot;,&quot;protocol&quot;:&quot;http&quot;,&quot;container&quot;:&quot;mkv&quot;,&quot;videoCodec&quot;:&quot;h264&quot;,&quot;audioCodec&quot;:&quot;opus&quot;,&quot;audioChannels&quot;:1,&quot;transcodeHwRequested&quot;:true,&quot;timeStamp&quot;:1.7058958054919229E9,&quot;maxOffsetAvailable&quot;:29.53,&quot;minOffsetAvailable&quot;:3.003000020980835}]</example> */
        [JsonPropertyName("TranscodeSession")]
        public List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>? TranscodeSession { get { return this.TranscodeSessionOption; } set { this.TranscodeSessionOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTranscodeSessions200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TranscodeSession: ").Append(TranscodeSession).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTranscodeSessions200ResponseMediaContainer" />
    /// </summary>
    public class GetTranscodeSessions200ResponseMediaContainerJsonConverter : JsonConverter<GetTranscodeSessions200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetTranscodeSessions200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTranscodeSessions200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> size = default;
            Option<List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>?> transcodeSession = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(JsonSerializer.Deserialize<long>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "TranscodeSession":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transcodeSession = new Option<List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>?>(JsonSerializer.Deserialize<List<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainer.");

            if (transcodeSession.IsSet && transcodeSession.Value == null)
                throw new ArgumentNullException(nameof(transcodeSession), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainer.");

            return new GetTranscodeSessions200ResponseMediaContainer(size, transcodeSession);
        }

        /// <summary>
        /// Serializes a <see cref="GetTranscodeSessions200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTranscodeSessions200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTranscodeSessions200ResponseMediaContainer getTranscodeSessions200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTranscodeSessions200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTranscodeSessions200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTranscodeSessions200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTranscodeSessions200ResponseMediaContainer getTranscodeSessions200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTranscodeSessions200ResponseMediaContainer.TranscodeSessionOption.IsSet && getTranscodeSessions200ResponseMediaContainer.TranscodeSession == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainer.TranscodeSession), "Property is required for class GetTranscodeSessions200ResponseMediaContainer.");

            if (getTranscodeSessions200ResponseMediaContainer.SizeOption.IsSet)
            {
                writer.WritePropertyName("size");
                JsonSerializer.Serialize(writer, getTranscodeSessions200ResponseMediaContainer.Size, jsonSerializerOptions);
            }
            if (getTranscodeSessions200ResponseMediaContainer.TranscodeSessionOption.IsSet)
            {
                writer.WritePropertyName("TranscodeSession");
                JsonSerializer.Serialize(writer, getTranscodeSessions200ResponseMediaContainer.TranscodeSession, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetTranscodeSessions200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetTranscodeSessions200ResponseMediaContainer))]
    public partial class GetTranscodeSessions200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
