// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner
    /// </summary>
    public partial class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner" /> class.
        /// </summary>
        /// <param name="key">key</param>
        /// <param name="throttled">throttled</param>
        /// <param name="complete">complete</param>
        /// <param name="progress">progress</param>
        /// <param name="size">size</param>
        /// <param name="speed">speed</param>
        /// <param name="error">error</param>
        /// <param name="duration">duration</param>
        /// <param name="remaining">remaining</param>
        /// <param name="context">context</param>
        /// <param name="sourceVideoCodec">sourceVideoCodec</param>
        /// <param name="sourceAudioCodec">sourceAudioCodec</param>
        /// <param name="videoDecision">videoDecision</param>
        /// <param name="audioDecision">audioDecision</param>
        /// <param name="subtitleDecision">subtitleDecision</param>
        /// <param name="protocol">protocol</param>
        /// <param name="container">container</param>
        /// <param name="videoCodec">videoCodec</param>
        /// <param name="audioCodec">audioCodec</param>
        /// <param name="audioChannels">audioChannels</param>
        /// <param name="transcodeHwRequested">transcodeHwRequested</param>
        /// <param name="timeStamp">timeStamp</param>
        /// <param name="maxOffsetAvailable">maxOffsetAvailable</param>
        /// <param name="minOffsetAvailable">minOffsetAvailable</param>
        [JsonConstructor]
        public GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner(Option<string?> key = default, Option<bool?> throttled = default, Option<bool?> complete = default, Option<decimal?> progress = default, Option<long?> size = default, Option<decimal?> speed = default, Option<bool?> error = default, Option<int?> duration = default, Option<int?> remaining = default, Option<string?> context = default, Option<string?> sourceVideoCodec = default, Option<string?> sourceAudioCodec = default, Option<string?> videoDecision = default, Option<string?> audioDecision = default, Option<string?> subtitleDecision = default, Option<string?> protocol = default, Option<string?> container = default, Option<string?> videoCodec = default, Option<string?> audioCodec = default, Option<int?> audioChannels = default, Option<bool?> transcodeHwRequested = default, Option<decimal?> timeStamp = default, Option<decimal?> maxOffsetAvailable = default, Option<decimal?> minOffsetAvailable = default)
        {
            KeyOption = key;
            ThrottledOption = throttled;
            CompleteOption = complete;
            ProgressOption = progress;
            SizeOption = size;
            SpeedOption = speed;
            ErrorOption = error;
            DurationOption = duration;
            RemainingOption = remaining;
            ContextOption = context;
            SourceVideoCodecOption = sourceVideoCodec;
            SourceAudioCodecOption = sourceAudioCodec;
            VideoDecisionOption = videoDecision;
            AudioDecisionOption = audioDecision;
            SubtitleDecisionOption = subtitleDecision;
            ProtocolOption = protocol;
            ContainerOption = container;
            VideoCodecOption = videoCodec;
            AudioCodecOption = audioCodec;
            AudioChannelsOption = audioChannels;
            TranscodeHwRequestedOption = transcodeHwRequested;
            TimeStampOption = timeStamp;
            MaxOffsetAvailableOption = maxOffsetAvailable;
            MinOffsetAvailableOption = minOffsetAvailable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /* <example>vv3i2q2lax92qlzul1hbd4bx</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Throttled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThrottledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Throttled
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("throttled")]
        public bool? Throttled { get { return this.ThrottledOption; } set { this.ThrottledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Complete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CompleteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("complete")]
        public bool? Complete { get { return this.CompleteOption; } set { this.CompleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Progress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ProgressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        /* <example>1.7999999523162842</example> */
        [JsonPropertyName("progress")]
        public decimal? Progress { get { return this.ProgressOption; } set { this.ProgressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Speed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SpeedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        /* <example>25.100000381469727</example> */
        [JsonPropertyName("speed")]
        public decimal? Speed { get { return this.SpeedOption; } set { this.SpeedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("error")]
        public bool? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        /* <example>1445695</example> */
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remaining
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RemainingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remaining
        /// </summary>
        /* <example>53</example> */
        [JsonPropertyName("remaining")]
        public int? Remaining { get { return this.RemainingOption; } set { this.RemainingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Context
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        /* <example>streaming</example> */
        [JsonPropertyName("context")]
        public string? Context { get { return this.ContextOption; } set { this.ContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceVideoCodec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceVideoCodecOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceVideoCodec
        /// </summary>
        /* <example>h264</example> */
        [JsonPropertyName("sourceVideoCodec")]
        public string? SourceVideoCodec { get { return this.SourceVideoCodecOption; } set { this.SourceVideoCodecOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceAudioCodec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceAudioCodecOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceAudioCodec
        /// </summary>
        /* <example>aac</example> */
        [JsonPropertyName("sourceAudioCodec")]
        public string? SourceAudioCodec { get { return this.SourceAudioCodecOption; } set { this.SourceAudioCodecOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoDecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VideoDecisionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoDecision
        /// </summary>
        /* <example>transcode</example> */
        [JsonPropertyName("videoDecision")]
        public string? VideoDecision { get { return this.VideoDecisionOption; } set { this.VideoDecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudioDecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AudioDecisionOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudioDecision
        /// </summary>
        /* <example>transcode</example> */
        [JsonPropertyName("audioDecision")]
        public string? AudioDecision { get { return this.AudioDecisionOption; } set { this.AudioDecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubtitleDecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubtitleDecisionOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubtitleDecision
        /// </summary>
        /* <example>burn</example> */
        [JsonPropertyName("subtitleDecision")]
        public string? SubtitleDecision { get { return this.SubtitleDecisionOption; } set { this.SubtitleDecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Protocol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProtocolOption { get; private set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        /* <example>http</example> */
        [JsonPropertyName("protocol")]
        public string? Protocol { get { return this.ProtocolOption; } set { this.ProtocolOption = new(value); } }

        /// <summary>
        /// Used to track the state of Container
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContainerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        /* <example>mkv</example> */
        [JsonPropertyName("container")]
        public string? Container { get { return this.ContainerOption; } set { this.ContainerOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoCodec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VideoCodecOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        /* <example>h264</example> */
        [JsonPropertyName("videoCodec")]
        public string? VideoCodec { get { return this.VideoCodecOption; } set { this.VideoCodecOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudioCodec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AudioCodecOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        /* <example>opus</example> */
        [JsonPropertyName("audioCodec")]
        public string? AudioCodec { get { return this.AudioCodecOption; } set { this.AudioCodecOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudioChannels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AudioChannelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudioChannels
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("audioChannels")]
        public int? AudioChannels { get { return this.AudioChannelsOption; } set { this.AudioChannelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TranscodeHwRequested
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranscodeHwRequestedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TranscodeHwRequested
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("transcodeHwRequested")]
        public bool? TranscodeHwRequested { get { return this.TranscodeHwRequestedOption; } set { this.TranscodeHwRequestedOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeStamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TimeStampOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        /* <example>1705895805.4919229</example> */
        [JsonPropertyName("timeStamp")]
        public decimal? TimeStamp { get { return this.TimeStampOption; } set { this.TimeStampOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxOffsetAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MaxOffsetAvailableOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxOffsetAvailable
        /// </summary>
        /* <example>29.53</example> */
        [JsonPropertyName("maxOffsetAvailable")]
        public decimal? MaxOffsetAvailable { get { return this.MaxOffsetAvailableOption; } set { this.MaxOffsetAvailableOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinOffsetAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MinOffsetAvailableOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinOffsetAvailable
        /// </summary>
        /* <example>3.003000020980835</example> */
        [JsonPropertyName("minOffsetAvailable")]
        public decimal? MinOffsetAvailable { get { return this.MinOffsetAvailableOption; } set { this.MinOffsetAvailableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Throttled: ").Append(Throttled).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  SourceVideoCodec: ").Append(SourceVideoCodec).Append("\n");
            sb.Append("  SourceAudioCodec: ").Append(SourceAudioCodec).Append("\n");
            sb.Append("  VideoDecision: ").Append(VideoDecision).Append("\n");
            sb.Append("  AudioDecision: ").Append(AudioDecision).Append("\n");
            sb.Append("  SubtitleDecision: ").Append(SubtitleDecision).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  TranscodeHwRequested: ").Append(TranscodeHwRequested).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  MaxOffsetAvailable: ").Append(MaxOffsetAvailable).Append("\n");
            sb.Append("  MinOffsetAvailable: ").Append(MinOffsetAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner" />
    /// </summary>
    public class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInnerJsonConverter : JsonConverter<GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<bool?> throttled = default;
            Option<bool?> complete = default;
            Option<decimal?> progress = default;
            Option<long?> size = default;
            Option<decimal?> speed = default;
            Option<bool?> error = default;
            Option<int?> duration = default;
            Option<int?> remaining = default;
            Option<string?> context = default;
            Option<string?> sourceVideoCodec = default;
            Option<string?> sourceAudioCodec = default;
            Option<string?> videoDecision = default;
            Option<string?> audioDecision = default;
            Option<string?> subtitleDecision = default;
            Option<string?> protocol = default;
            Option<string?> container = default;
            Option<string?> videoCodec = default;
            Option<string?> audioCodec = default;
            Option<int?> audioChannels = default;
            Option<bool?> transcodeHwRequested = default;
            Option<decimal?> timeStamp = default;
            Option<decimal?> maxOffsetAvailable = default;
            Option<decimal?> minOffsetAvailable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "throttled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                throttled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "complete":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                complete = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "progress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                progress = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(JsonSerializer.Deserialize<long>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "speed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                speed = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "duration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                duration = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "remaining":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remaining = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "context":
                            context = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceVideoCodec":
                            sourceVideoCodec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceAudioCodec":
                            sourceAudioCodec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "videoDecision":
                            videoDecision = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audioDecision":
                            audioDecision = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subtitleDecision":
                            subtitleDecision = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protocol":
                            protocol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "container":
                            container = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "videoCodec":
                            videoCodec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audioCodec":
                            audioCodec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audioChannels":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                audioChannels = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "transcodeHwRequested":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transcodeHwRequested = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "timeStamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeStamp = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "maxOffsetAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxOffsetAvailable = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "minOffsetAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minOffsetAvailable = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (throttled.IsSet && throttled.Value == null)
                throw new ArgumentNullException(nameof(throttled), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (complete.IsSet && complete.Value == null)
                throw new ArgumentNullException(nameof(complete), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (progress.IsSet && progress.Value == null)
                throw new ArgumentNullException(nameof(progress), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (speed.IsSet && speed.Value == null)
                throw new ArgumentNullException(nameof(speed), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (remaining.IsSet && remaining.Value == null)
                throw new ArgumentNullException(nameof(remaining), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (sourceVideoCodec.IsSet && sourceVideoCodec.Value == null)
                throw new ArgumentNullException(nameof(sourceVideoCodec), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (sourceAudioCodec.IsSet && sourceAudioCodec.Value == null)
                throw new ArgumentNullException(nameof(sourceAudioCodec), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (videoDecision.IsSet && videoDecision.Value == null)
                throw new ArgumentNullException(nameof(videoDecision), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (audioDecision.IsSet && audioDecision.Value == null)
                throw new ArgumentNullException(nameof(audioDecision), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (subtitleDecision.IsSet && subtitleDecision.Value == null)
                throw new ArgumentNullException(nameof(subtitleDecision), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (protocol.IsSet && protocol.Value == null)
                throw new ArgumentNullException(nameof(protocol), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (container.IsSet && container.Value == null)
                throw new ArgumentNullException(nameof(container), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (videoCodec.IsSet && videoCodec.Value == null)
                throw new ArgumentNullException(nameof(videoCodec), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (audioCodec.IsSet && audioCodec.Value == null)
                throw new ArgumentNullException(nameof(audioCodec), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (audioChannels.IsSet && audioChannels.Value == null)
                throw new ArgumentNullException(nameof(audioChannels), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (transcodeHwRequested.IsSet && transcodeHwRequested.Value == null)
                throw new ArgumentNullException(nameof(transcodeHwRequested), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (timeStamp.IsSet && timeStamp.Value == null)
                throw new ArgumentNullException(nameof(timeStamp), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (maxOffsetAvailable.IsSet && maxOffsetAvailable.Value == null)
                throw new ArgumentNullException(nameof(maxOffsetAvailable), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (minOffsetAvailable.IsSet && minOffsetAvailable.Value == null)
                throw new ArgumentNullException(nameof(minOffsetAvailable), "Property is not nullable for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            return new GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner(key, throttled, complete, progress, size, speed, error, duration, remaining, context, sourceVideoCodec, sourceAudioCodec, videoDecision, audioDecision, subtitleDecision, protocol, container, videoCodec, audioCodec, audioChannels, transcodeHwRequested, timeStamp, maxOffsetAvailable, minOffsetAvailable);
        }

        /// <summary>
        /// Serializes a <see cref="GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.KeyOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Key == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Key), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ContextOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Context == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Context), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceVideoCodecOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceVideoCodec == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceVideoCodec), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceAudioCodecOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceAudioCodec == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceAudioCodec), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoDecisionOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoDecision == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoDecision), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioDecisionOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioDecision == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioDecision), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SubtitleDecisionOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SubtitleDecision == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SubtitleDecision), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ProtocolOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Protocol == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Protocol), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ContainerOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Container == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Container), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoCodecOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoCodec == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoCodec), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioCodecOption.IsSet && getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioCodec == null)
                throw new ArgumentNullException(nameof(getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioCodec), "Property is required for class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.");

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.KeyOption.IsSet)
                writer.WriteString("key", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Key);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ThrottledOption.IsSet)
                writer.WriteBoolean("throttled", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ThrottledOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.CompleteOption.IsSet)
                writer.WriteBoolean("complete", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.CompleteOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ProgressOption.IsSet)
                writer.WriteNumber("progress", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ProgressOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SizeOption.IsSet)
            {
                writer.WritePropertyName("size");
                JsonSerializer.Serialize(writer, getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Size, jsonSerializerOptions);
            }
            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SpeedOption.IsSet)
                writer.WriteNumber("speed", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SpeedOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ErrorOption.IsSet)
                writer.WriteBoolean("error", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ErrorOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.DurationOption.IsSet)
                writer.WriteNumber("duration", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.DurationOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.RemainingOption.IsSet)
                writer.WriteNumber("remaining", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.RemainingOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ContextOption.IsSet)
                writer.WriteString("context", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Context);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceVideoCodecOption.IsSet)
                writer.WriteString("sourceVideoCodec", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceVideoCodec);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceAudioCodecOption.IsSet)
                writer.WriteString("sourceAudioCodec", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SourceAudioCodec);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoDecisionOption.IsSet)
                writer.WriteString("videoDecision", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoDecision);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioDecisionOption.IsSet)
                writer.WriteString("audioDecision", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioDecision);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SubtitleDecisionOption.IsSet)
                writer.WriteString("subtitleDecision", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.SubtitleDecision);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ProtocolOption.IsSet)
                writer.WriteString("protocol", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Protocol);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.ContainerOption.IsSet)
                writer.WriteString("container", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.Container);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoCodecOption.IsSet)
                writer.WriteString("videoCodec", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.VideoCodec);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioCodecOption.IsSet)
                writer.WriteString("audioCodec", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioCodec);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioChannelsOption.IsSet)
                writer.WriteNumber("audioChannels", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.AudioChannelsOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.TranscodeHwRequestedOption.IsSet)
                writer.WriteBoolean("transcodeHwRequested", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.TranscodeHwRequestedOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.TimeStampOption.IsSet)
                writer.WriteNumber("timeStamp", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.TimeStampOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.MaxOffsetAvailableOption.IsSet)
                writer.WriteNumber("maxOffsetAvailable", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.MaxOffsetAvailableOption.Value!.Value);

            if (getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.MinOffsetAvailableOption.IsSet)
                writer.WriteNumber("minOffsetAvailable", getTranscodeSessions200ResponseMediaContainerTranscodeSessionInner.MinOffsetAvailableOption.Value!.Value);
        }
    }

    /// <summary>
    /// The GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner))]
    public partial class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInnerSerializationContext : JsonSerializerContext { }
}
