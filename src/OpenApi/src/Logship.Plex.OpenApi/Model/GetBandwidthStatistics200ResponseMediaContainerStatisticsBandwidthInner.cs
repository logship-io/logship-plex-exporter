// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner
    /// </summary>
    public partial class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner" /> class.
        /// </summary>
        /// <param name="accountID">accountID</param>
        /// <param name="deviceID">deviceID</param>
        /// <param name="timespan">timespan</param>
        /// <param name="at">at</param>
        /// <param name="lan">lan</param>
        /// <param name="bytes">bytes</param>
        [JsonConstructor]
        public GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner(Option<int?> accountID = default, Option<int?> deviceID = default, Option<int?> timespan = default, Option<int?> at = default, Option<bool?> lan = default, Option<long?> bytes = default)
        {
            AccountIDOption = accountID;
            DeviceIDOption = deviceID;
            TimespanOption = timespan;
            AtOption = at;
            LanOption = lan;
            BytesOption = bytes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccountID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccountIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        /* <example>238960586</example> */
        [JsonPropertyName("accountID")]
        public int? AccountID { get { return this.AccountIDOption; } set { this.AccountIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DeviceIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceID
        /// </summary>
        /* <example>208</example> */
        [JsonPropertyName("deviceID")]
        public int? DeviceID { get { return this.DeviceIDOption; } set { this.DeviceIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timespan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimespanOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timespan
        /// </summary>
        /* <example>6</example> */
        [JsonPropertyName("timespan")]
        public int? Timespan { get { return this.TimespanOption; } set { this.TimespanOption = new(value); } }

        /// <summary>
        /// Used to track the state of At
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AtOption { get; private set; }

        /// <summary>
        /// Gets or Sets At
        /// </summary>
        /* <example>1718387650</example> */
        [JsonPropertyName("at")]
        public int? At { get { return this.AtOption; } set { this.AtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Lan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LanOption { get; private set; }

        /// <summary>
        /// Gets or Sets Lan
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("lan")]
        public bool? Lan { get { return this.LanOption; } set { this.LanOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BytesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bytes
        /// </summary>
        /* <example>22</example> */
        [JsonPropertyName("bytes")]
        public long? Bytes { get { return this.BytesOption; } set { this.BytesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  DeviceID: ").Append(DeviceID).Append("\n");
            sb.Append("  Timespan: ").Append(Timespan).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  Lan: ").Append(Lan).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner" />
    /// </summary>
    public class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInnerJsonConverter : JsonConverter<GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> accountID = default;
            Option<int?> deviceID = default;
            Option<int?> timespan = default;
            Option<int?> at = default;
            Option<bool?> lan = default;
            Option<long?> bytes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountID":
                            accountID = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "deviceID":
                            deviceID = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "timespan":
                            timespan = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "at":
                            at = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "lan":
                            lan = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bytes":
                            bytes = new Option<long?>(JsonSerializer.Deserialize<long>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountID.IsSet && accountID.Value == null)
                throw new ArgumentNullException(nameof(accountID), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            if (deviceID.IsSet && deviceID.Value == null)
                throw new ArgumentNullException(nameof(deviceID), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            if (timespan.IsSet && timespan.Value == null)
                throw new ArgumentNullException(nameof(timespan), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            if (at.IsSet && at.Value == null)
                throw new ArgumentNullException(nameof(at), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            if (lan.IsSet && lan.Value == null)
                throw new ArgumentNullException(nameof(lan), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            if (bytes.IsSet && bytes.Value == null)
                throw new ArgumentNullException(nameof(bytes), "Property is not nullable for class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.");

            return new GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner(accountID, deviceID, timespan, at, lan, bytes);
        }

        /// <summary>
        /// Serializes a <see cref="GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.AccountIDOption.IsSet)
                writer.WriteNumber("accountID", getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.AccountIDOption.Value!.Value);

            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.DeviceIDOption.IsSet)
                writer.WriteNumber("deviceID", getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.DeviceIDOption.Value!.Value);

            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.TimespanOption.IsSet)
                writer.WriteNumber("timespan", getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.TimespanOption.Value!.Value);

            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.AtOption.IsSet)
                writer.WriteNumber("at", getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.AtOption.Value!.Value);

            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.LanOption.IsSet)
                writer.WriteBoolean("lan", getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.LanOption.Value!.Value);

            if (getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.BytesOption.IsSet)
            {
                writer.WritePropertyName("bytes");
                JsonSerializer.Serialize(writer, getBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner.Bytes, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInner))]
    public partial class GetBandwidthStatistics200ResponseMediaContainerStatisticsBandwidthInnerSerializationContext : JsonSerializerContext { }
}
