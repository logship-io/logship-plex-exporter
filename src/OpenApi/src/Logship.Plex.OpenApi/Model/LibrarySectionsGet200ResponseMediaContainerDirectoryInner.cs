// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// LibrarySectionsGet200ResponseMediaContainerDirectoryInner
    /// </summary>
    public partial class LibrarySectionsGet200ResponseMediaContainerDirectoryInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibrarySectionsGet200ResponseMediaContainerDirectoryInner" /> class.
        /// </summary>
        /// <param name="key">Unique key for the library</param>
        /// <param name="title">Library title</param>
        /// <param name="type">Type of media (e.g., movie, show, music)</param>
        /// <param name="agent">Metadata agent used for the library</param>
        /// <param name="scanner">Scanner used to detect media</param>
        [JsonConstructor]
        public LibrarySectionsGet200ResponseMediaContainerDirectoryInner(Option<string?> key = default, Option<string?> title = default, Option<string?> type = default, Option<string?> agent = default, Option<string?> scanner = default)
        {
            KeyOption = key;
            TitleOption = title;
            TypeOption = type;
            AgentOption = agent;
            ScannerOption = scanner;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Unique key for the library
        /// </summary>
        /// <value>Unique key for the library</value>
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Library title
        /// </summary>
        /// <value>Library title</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Type of media (e.g., movie, show, music)
        /// </summary>
        /// <value>Type of media (e.g., movie, show, music)</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Agent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AgentOption { get; private set; }

        /// <summary>
        /// Metadata agent used for the library
        /// </summary>
        /// <value>Metadata agent used for the library</value>
        [JsonPropertyName("agent")]
        public string? Agent { get { return this.AgentOption; } set { this.AgentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scanner
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScannerOption { get; private set; }

        /// <summary>
        /// Scanner used to detect media
        /// </summary>
        /// <value>Scanner used to detect media</value>
        [JsonPropertyName("scanner")]
        public string? Scanner { get { return this.ScannerOption; } set { this.ScannerOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibrarySectionsGet200ResponseMediaContainerDirectoryInner {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Scanner: ").Append(Scanner).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LibrarySectionsGet200ResponseMediaContainerDirectoryInner" />
    /// </summary>
    public class LibrarySectionsGet200ResponseMediaContainerDirectoryInnerJsonConverter : JsonConverter<LibrarySectionsGet200ResponseMediaContainerDirectoryInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="LibrarySectionsGet200ResponseMediaContainerDirectoryInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LibrarySectionsGet200ResponseMediaContainerDirectoryInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> agent = default;
            Option<string?> scanner = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "agent":
                            agent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scanner":
                            scanner = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (agent.IsSet && agent.Value == null)
                throw new ArgumentNullException(nameof(agent), "Property is not nullable for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (scanner.IsSet && scanner.Value == null)
                throw new ArgumentNullException(nameof(scanner), "Property is not nullable for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            return new LibrarySectionsGet200ResponseMediaContainerDirectoryInner(key, title, type, agent, scanner);
        }

        /// <summary>
        /// Serializes a <see cref="LibrarySectionsGet200ResponseMediaContainerDirectoryInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="librarySectionsGet200ResponseMediaContainerDirectoryInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LibrarySectionsGet200ResponseMediaContainerDirectoryInner librarySectionsGet200ResponseMediaContainerDirectoryInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, librarySectionsGet200ResponseMediaContainerDirectoryInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LibrarySectionsGet200ResponseMediaContainerDirectoryInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="librarySectionsGet200ResponseMediaContainerDirectoryInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LibrarySectionsGet200ResponseMediaContainerDirectoryInner librarySectionsGet200ResponseMediaContainerDirectoryInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.KeyOption.IsSet && librarySectionsGet200ResponseMediaContainerDirectoryInner.Key == null)
                throw new ArgumentNullException(nameof(librarySectionsGet200ResponseMediaContainerDirectoryInner.Key), "Property is required for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.TitleOption.IsSet && librarySectionsGet200ResponseMediaContainerDirectoryInner.Title == null)
                throw new ArgumentNullException(nameof(librarySectionsGet200ResponseMediaContainerDirectoryInner.Title), "Property is required for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.TypeOption.IsSet && librarySectionsGet200ResponseMediaContainerDirectoryInner.Type == null)
                throw new ArgumentNullException(nameof(librarySectionsGet200ResponseMediaContainerDirectoryInner.Type), "Property is required for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.AgentOption.IsSet && librarySectionsGet200ResponseMediaContainerDirectoryInner.Agent == null)
                throw new ArgumentNullException(nameof(librarySectionsGet200ResponseMediaContainerDirectoryInner.Agent), "Property is required for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.ScannerOption.IsSet && librarySectionsGet200ResponseMediaContainerDirectoryInner.Scanner == null)
                throw new ArgumentNullException(nameof(librarySectionsGet200ResponseMediaContainerDirectoryInner.Scanner), "Property is required for class LibrarySectionsGet200ResponseMediaContainerDirectoryInner.");

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.KeyOption.IsSet)
                writer.WriteString("key", librarySectionsGet200ResponseMediaContainerDirectoryInner.Key);

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.TitleOption.IsSet)
                writer.WriteString("title", librarySectionsGet200ResponseMediaContainerDirectoryInner.Title);

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.TypeOption.IsSet)
                writer.WriteString("type", librarySectionsGet200ResponseMediaContainerDirectoryInner.Type);

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.AgentOption.IsSet)
                writer.WriteString("agent", librarySectionsGet200ResponseMediaContainerDirectoryInner.Agent);

            if (librarySectionsGet200ResponseMediaContainerDirectoryInner.ScannerOption.IsSet)
                writer.WriteString("scanner", librarySectionsGet200ResponseMediaContainerDirectoryInner.Scanner);
        }
    }

    /// <summary>
    /// The LibrarySectionsGet200ResponseMediaContainerDirectoryInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LibrarySectionsGet200ResponseMediaContainerDirectoryInner))]
    public partial class LibrarySectionsGet200ResponseMediaContainerDirectoryInnerSerializationContext : JsonSerializerContext { }
}
