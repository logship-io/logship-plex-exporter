// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetServerActivities200ResponseMediaContainer
    /// </summary>
    public partial class GetServerActivities200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetServerActivities200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="activity">activity</param>
        [JsonConstructor]
        public GetServerActivities200ResponseMediaContainer(Option<decimal?> size = default, Option<List<GetServerActivities200ResponseMediaContainerActivityInner>?> activity = default)
        {
            SizeOption = size;
            ActivityOption = activity;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public decimal? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Activity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetServerActivities200ResponseMediaContainerActivityInner>?> ActivityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [JsonPropertyName("Activity")]
        public List<GetServerActivities200ResponseMediaContainerActivityInner>? Activity { get { return this.ActivityOption; } set { this.ActivityOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetServerActivities200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetServerActivities200ResponseMediaContainer" />
    /// </summary>
    public class GetServerActivities200ResponseMediaContainerJsonConverter : JsonConverter<GetServerActivities200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetServerActivities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetServerActivities200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> size = default;
            Option<List<GetServerActivities200ResponseMediaContainerActivityInner>?> activity = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            size = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "Activity":
                            activity = new Option<List<GetServerActivities200ResponseMediaContainerActivityInner>?>(JsonSerializer.Deserialize<List<GetServerActivities200ResponseMediaContainerActivityInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetServerActivities200ResponseMediaContainer.");

            if (activity.IsSet && activity.Value == null)
                throw new ArgumentNullException(nameof(activity), "Property is not nullable for class GetServerActivities200ResponseMediaContainer.");

            return new GetServerActivities200ResponseMediaContainer(size, activity);
        }

        /// <summary>
        /// Serializes a <see cref="GetServerActivities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerActivities200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetServerActivities200ResponseMediaContainer getServerActivities200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getServerActivities200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetServerActivities200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerActivities200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetServerActivities200ResponseMediaContainer getServerActivities200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getServerActivities200ResponseMediaContainer.ActivityOption.IsSet && getServerActivities200ResponseMediaContainer.Activity == null)
                throw new ArgumentNullException(nameof(getServerActivities200ResponseMediaContainer.Activity), "Property is required for class GetServerActivities200ResponseMediaContainer.");

            if (getServerActivities200ResponseMediaContainer.SizeOption.IsSet)
                writer.WriteNumber("size", getServerActivities200ResponseMediaContainer.SizeOption.Value!.Value);

            if (getServerActivities200ResponseMediaContainer.ActivityOption.IsSet)
            {
                writer.WritePropertyName("Activity");
                JsonSerializer.Serialize(writer, getServerActivities200ResponseMediaContainer.Activity, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetServerActivities200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetServerActivities200ResponseMediaContainer))]
    public partial class GetServerActivities200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
