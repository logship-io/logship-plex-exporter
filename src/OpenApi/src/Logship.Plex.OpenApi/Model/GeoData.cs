// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// Geo location data
    /// </summary>
    public partial class GeoData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoData" /> class.
        /// </summary>
        /// <param name="code">The ISO 3166-1 alpha-2 code of the country.</param>
        /// <param name="continentCode">The continent code where the country is located.</param>
        /// <param name="country">The official name of the country.</param>
        /// <param name="city">The name of the city.</param>
        /// <param name="varTimeZone">The time zone of the country.</param>
        /// <param name="postalCode">The postal code of the location.</param>
        /// <param name="subdivisions">The name of the primary administrative subdivision.</param>
        /// <param name="coordinates">The geographical coordinates (latitude, longitude) of the location.</param>
        /// <param name="europeanUnionMember">Indicates if the country is a member of the European Union. (default to false)</param>
        /// <param name="inPrivacyRestrictedCountry">Indicates if the country has privacy restrictions. (default to false)</param>
        /// <param name="inPrivacyRestrictedRegion">Indicates if the region has privacy restrictions. (default to false)</param>
        [JsonConstructor]
        public GeoData(string code, string continentCode, string country, string city, string varTimeZone, string postalCode, string subdivisions, string coordinates, bool europeanUnionMember = false, bool inPrivacyRestrictedCountry = false, bool inPrivacyRestrictedRegion = false)
        {
            Code = code;
            ContinentCode = continentCode;
            Country = country;
            City = city;
            VarTimeZone = varTimeZone;
            PostalCode = postalCode;
            Subdivisions = subdivisions;
            Coordinates = coordinates;
            EuropeanUnionMember = europeanUnionMember;
            InPrivacyRestrictedCountry = inPrivacyRestrictedCountry;
            InPrivacyRestrictedRegion = inPrivacyRestrictedRegion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ISO 3166-1 alpha-2 code of the country.
        /// </summary>
        /// <value>The ISO 3166-1 alpha-2 code of the country.</value>
        /* <example>VI</example> */
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// The continent code where the country is located.
        /// </summary>
        /// <value>The continent code where the country is located.</value>
        /* <example>NA</example> */
        [JsonPropertyName("continent_code")]
        public string ContinentCode { get; set; }

        /// <summary>
        /// The official name of the country.
        /// </summary>
        /// <value>The official name of the country.</value>
        /* <example>United States Virgin Islands</example> */
        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        /* <example>Amsterdam</example> */
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The time zone of the country.
        /// </summary>
        /// <value>The time zone of the country.</value>
        /* <example>America/St_Thomas</example> */
        [JsonPropertyName("time_zone")]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// The postal code of the location.
        /// </summary>
        /// <value>The postal code of the location.</value>
        /* <example>802</example> */
        [JsonPropertyName("postal_code")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The name of the primary administrative subdivision.
        /// </summary>
        /// <value>The name of the primary administrative subdivision.</value>
        /* <example>Saint Thomas</example> */
        [JsonPropertyName("subdivisions")]
        public string Subdivisions { get; set; }

        /// <summary>
        /// The geographical coordinates (latitude, longitude) of the location.
        /// </summary>
        /// <value>The geographical coordinates (latitude, longitude) of the location.</value>
        /* <example>18.3381, -64.8941</example> */
        [JsonPropertyName("coordinates")]
        public string Coordinates { get; set; }

        /// <summary>
        /// Indicates if the country is a member of the European Union.
        /// </summary>
        /// <value>Indicates if the country is a member of the European Union.</value>
        /* <example>true</example> */
        [JsonPropertyName("european_union_member")]
        public bool EuropeanUnionMember { get; set; }

        /// <summary>
        /// Indicates if the country has privacy restrictions.
        /// </summary>
        /// <value>Indicates if the country has privacy restrictions.</value>
        /* <example>true</example> */
        [JsonPropertyName("in_privacy_restricted_country")]
        public bool InPrivacyRestrictedCountry { get; set; }

        /// <summary>
        /// Indicates if the region has privacy restrictions.
        /// </summary>
        /// <value>Indicates if the region has privacy restrictions.</value>
        /* <example>true</example> */
        [JsonPropertyName("in_privacy_restricted_region")]
        public bool InPrivacyRestrictedRegion { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeoData {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ContinentCode: ").Append(ContinentCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Subdivisions: ").Append(Subdivisions).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  EuropeanUnionMember: ").Append(EuropeanUnionMember).Append("\n");
            sb.Append("  InPrivacyRestrictedCountry: ").Append(InPrivacyRestrictedCountry).Append("\n");
            sb.Append("  InPrivacyRestrictedRegion: ").Append(InPrivacyRestrictedRegion).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GeoData" />
    /// </summary>
    public class GeoDataJsonConverter : JsonConverter<GeoData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GeoData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GeoData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> continentCode = default;
            Option<string?> country = default;
            Option<string?> city = default;
            Option<string?> varTimeZone = default;
            Option<string?> postalCode = default;
            Option<string?> subdivisions = default;
            Option<string?> coordinates = default;
            Option<bool?> europeanUnionMember = default;
            Option<bool?> inPrivacyRestrictedCountry = default;
            Option<bool?> inPrivacyRestrictedRegion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "continent_code":
                            continentCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "time_zone":
                            varTimeZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postal_code":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subdivisions":
                            subdivisions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coordinates":
                            coordinates = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "european_union_member":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                europeanUnionMember = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "in_privacy_restricted_country":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inPrivacyRestrictedCountry = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "in_privacy_restricted_region":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inPrivacyRestrictedRegion = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(code));

            if (!continentCode.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(continentCode));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(country));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(city));

            if (!varTimeZone.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(varTimeZone));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(postalCode));

            if (!subdivisions.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(subdivisions));

            if (!coordinates.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(coordinates));

            if (!europeanUnionMember.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(europeanUnionMember));

            if (!inPrivacyRestrictedCountry.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(inPrivacyRestrictedCountry));

            if (!inPrivacyRestrictedRegion.IsSet)
                throw new ArgumentException("Property is required for class GeoData.", nameof(inPrivacyRestrictedRegion));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GeoData.");

            if (continentCode.IsSet && continentCode.Value == null)
                throw new ArgumentNullException(nameof(continentCode), "Property is not nullable for class GeoData.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class GeoData.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class GeoData.");

            if (varTimeZone.IsSet && varTimeZone.Value == null)
                throw new ArgumentNullException(nameof(varTimeZone), "Property is not nullable for class GeoData.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class GeoData.");

            if (subdivisions.IsSet && subdivisions.Value == null)
                throw new ArgumentNullException(nameof(subdivisions), "Property is not nullable for class GeoData.");

            if (coordinates.IsSet && coordinates.Value == null)
                throw new ArgumentNullException(nameof(coordinates), "Property is not nullable for class GeoData.");

            if (europeanUnionMember.IsSet && europeanUnionMember.Value == null)
                throw new ArgumentNullException(nameof(europeanUnionMember), "Property is not nullable for class GeoData.");

            if (inPrivacyRestrictedCountry.IsSet && inPrivacyRestrictedCountry.Value == null)
                throw new ArgumentNullException(nameof(inPrivacyRestrictedCountry), "Property is not nullable for class GeoData.");

            if (inPrivacyRestrictedRegion.IsSet && inPrivacyRestrictedRegion.Value == null)
                throw new ArgumentNullException(nameof(inPrivacyRestrictedRegion), "Property is not nullable for class GeoData.");

            return new GeoData(code.Value!, continentCode.Value!, country.Value!, city.Value!, varTimeZone.Value!, postalCode.Value!, subdivisions.Value!, coordinates.Value!, europeanUnionMember.Value!.Value!, inPrivacyRestrictedCountry.Value!.Value!, inPrivacyRestrictedRegion.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GeoData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geoData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GeoData geoData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, geoData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GeoData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geoData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GeoData geoData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (geoData.Code == null)
                throw new ArgumentNullException(nameof(geoData.Code), "Property is required for class GeoData.");

            if (geoData.ContinentCode == null)
                throw new ArgumentNullException(nameof(geoData.ContinentCode), "Property is required for class GeoData.");

            if (geoData.Country == null)
                throw new ArgumentNullException(nameof(geoData.Country), "Property is required for class GeoData.");

            if (geoData.City == null)
                throw new ArgumentNullException(nameof(geoData.City), "Property is required for class GeoData.");

            if (geoData.VarTimeZone == null)
                throw new ArgumentNullException(nameof(geoData.VarTimeZone), "Property is required for class GeoData.");

            if (geoData.PostalCode == null)
                throw new ArgumentNullException(nameof(geoData.PostalCode), "Property is required for class GeoData.");

            if (geoData.Subdivisions == null)
                throw new ArgumentNullException(nameof(geoData.Subdivisions), "Property is required for class GeoData.");

            if (geoData.Coordinates == null)
                throw new ArgumentNullException(nameof(geoData.Coordinates), "Property is required for class GeoData.");

            writer.WriteString("code", geoData.Code);

            writer.WriteString("continent_code", geoData.ContinentCode);

            writer.WriteString("country", geoData.Country);

            writer.WriteString("city", geoData.City);

            writer.WriteString("time_zone", geoData.VarTimeZone);

            writer.WriteString("postal_code", geoData.PostalCode);

            writer.WriteString("subdivisions", geoData.Subdivisions);

            writer.WriteString("coordinates", geoData.Coordinates);

            writer.WriteBoolean("european_union_member", geoData.EuropeanUnionMember);

            writer.WriteBoolean("in_privacy_restricted_country", geoData.InPrivacyRestrictedCountry);

            writer.WriteBoolean("in_privacy_restricted_region", geoData.InPrivacyRestrictedRegion);
        }
    }

    /// <summary>
    /// The GeoDataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GeoData))]
    public partial class GeoDataSerializationContext : JsonSerializerContext { }
}
