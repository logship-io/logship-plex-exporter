// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetServerIdentity200ResponseMediaContainer
    /// </summary>
    public partial class GetServerIdentity200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetServerIdentity200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="claimed">claimed</param>
        /// <param name="machineIdentifier">machineIdentifier</param>
        /// <param name="varVersion">varVersion</param>
        [JsonConstructor]
        public GetServerIdentity200ResponseMediaContainer(Option<decimal?> size = default, Option<bool?> claimed = default, Option<string?> machineIdentifier = default, Option<string?> varVersion = default)
        {
            SizeOption = size;
            ClaimedOption = claimed;
            MachineIdentifierOption = machineIdentifier;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("size")]
        public decimal? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Claimed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ClaimedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Claimed
        /// </summary>
        [JsonPropertyName("claimed")]
        public bool? Claimed { get { return this.ClaimedOption; } set { this.ClaimedOption = new(value); } }

        /// <summary>
        /// Used to track the state of MachineIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MachineIdentifierOption { get; private set; }

        /// <summary>
        /// Gets or Sets MachineIdentifier
        /// </summary>
        [JsonPropertyName("machineIdentifier")]
        public string? MachineIdentifier { get { return this.MachineIdentifierOption; } set { this.MachineIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetServerIdentity200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Claimed: ").Append(Claimed).Append("\n");
            sb.Append("  MachineIdentifier: ").Append(MachineIdentifier).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetServerIdentity200ResponseMediaContainer" />
    /// </summary>
    public class GetServerIdentity200ResponseMediaContainerJsonConverter : JsonConverter<GetServerIdentity200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetServerIdentity200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetServerIdentity200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> size = default;
            Option<bool?> claimed = default;
            Option<string?> machineIdentifier = default;
            Option<string?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            size = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "claimed":
                            claimed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "machineIdentifier":
                            machineIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetServerIdentity200ResponseMediaContainer.");

            if (claimed.IsSet && claimed.Value == null)
                throw new ArgumentNullException(nameof(claimed), "Property is not nullable for class GetServerIdentity200ResponseMediaContainer.");

            if (machineIdentifier.IsSet && machineIdentifier.Value == null)
                throw new ArgumentNullException(nameof(machineIdentifier), "Property is not nullable for class GetServerIdentity200ResponseMediaContainer.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GetServerIdentity200ResponseMediaContainer.");

            return new GetServerIdentity200ResponseMediaContainer(size, claimed, machineIdentifier, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="GetServerIdentity200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerIdentity200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetServerIdentity200ResponseMediaContainer getServerIdentity200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getServerIdentity200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetServerIdentity200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getServerIdentity200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetServerIdentity200ResponseMediaContainer getServerIdentity200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getServerIdentity200ResponseMediaContainer.MachineIdentifierOption.IsSet && getServerIdentity200ResponseMediaContainer.MachineIdentifier == null)
                throw new ArgumentNullException(nameof(getServerIdentity200ResponseMediaContainer.MachineIdentifier), "Property is required for class GetServerIdentity200ResponseMediaContainer.");

            if (getServerIdentity200ResponseMediaContainer.VarVersionOption.IsSet && getServerIdentity200ResponseMediaContainer.VarVersion == null)
                throw new ArgumentNullException(nameof(getServerIdentity200ResponseMediaContainer.VarVersion), "Property is required for class GetServerIdentity200ResponseMediaContainer.");

            if (getServerIdentity200ResponseMediaContainer.SizeOption.IsSet)
                writer.WriteNumber("size", getServerIdentity200ResponseMediaContainer.SizeOption.Value!.Value);

            if (getServerIdentity200ResponseMediaContainer.ClaimedOption.IsSet)
                writer.WriteBoolean("claimed", getServerIdentity200ResponseMediaContainer.ClaimedOption.Value!.Value);

            if (getServerIdentity200ResponseMediaContainer.MachineIdentifierOption.IsSet)
                writer.WriteString("machineIdentifier", getServerIdentity200ResponseMediaContainer.MachineIdentifier);

            if (getServerIdentity200ResponseMediaContainer.VarVersionOption.IsSet)
                writer.WriteString("version", getServerIdentity200ResponseMediaContainer.VarVersion);
        }
    }

    /// <summary>
    /// The GetServerIdentity200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetServerIdentity200ResponseMediaContainer))]
    public partial class GetServerIdentity200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
