// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner
    /// </summary>
    public partial class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner" /> class.
        /// </summary>
        /// <param name="bottomLeft">bottomLeft</param>
        /// <param name="bottomRight">bottomRight</param>
        /// <param name="topLeft">topLeft</param>
        /// <param name="topRight">topRight</param>
        [JsonConstructor]
        public GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner(Option<string?> bottomLeft = default, Option<string?> bottomRight = default, Option<string?> topLeft = default, Option<string?> topRight = default)
        {
            BottomLeftOption = bottomLeft;
            BottomRightOption = bottomRight;
            TopLeftOption = topLeft;
            TopRightOption = topRight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BottomLeft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BottomLeftOption { get; private set; }

        /// <summary>
        /// Gets or Sets BottomLeft
        /// </summary>
        [JsonPropertyName("bottomLeft")]
        public string? BottomLeft { get { return this.BottomLeftOption; } set { this.BottomLeftOption = new(value); } }

        /// <summary>
        /// Used to track the state of BottomRight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BottomRightOption { get; private set; }

        /// <summary>
        /// Gets or Sets BottomRight
        /// </summary>
        [JsonPropertyName("bottomRight")]
        public string? BottomRight { get { return this.BottomRightOption; } set { this.BottomRightOption = new(value); } }

        /// <summary>
        /// Used to track the state of TopLeft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TopLeftOption { get; private set; }

        /// <summary>
        /// Gets or Sets TopLeft
        /// </summary>
        [JsonPropertyName("topLeft")]
        public string? TopLeft { get { return this.TopLeftOption; } set { this.TopLeftOption = new(value); } }

        /// <summary>
        /// Used to track the state of TopRight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TopRightOption { get; private set; }

        /// <summary>
        /// Gets or Sets TopRight
        /// </summary>
        [JsonPropertyName("topRight")]
        public string? TopRight { get { return this.TopRightOption; } set { this.TopRightOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner {\n");
            sb.Append("  BottomLeft: ").Append(BottomLeft).Append("\n");
            sb.Append("  BottomRight: ").Append(BottomRight).Append("\n");
            sb.Append("  TopLeft: ").Append(TopLeft).Append("\n");
            sb.Append("  TopRight: ").Append(TopRight).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner" />
    /// </summary>
    public class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInnerJsonConverter : JsonConverter<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> bottomLeft = default;
            Option<string?> bottomRight = default;
            Option<string?> topLeft = default;
            Option<string?> topRight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bottomLeft":
                            bottomLeft = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "bottomRight":
                            bottomRight = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "topLeft":
                            topLeft = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "topRight":
                            topRight = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bottomLeft.IsSet && bottomLeft.Value == null)
                throw new ArgumentNullException(nameof(bottomLeft), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (bottomRight.IsSet && bottomRight.Value == null)
                throw new ArgumentNullException(nameof(bottomRight), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (topLeft.IsSet && topLeft.Value == null)
                throw new ArgumentNullException(nameof(topLeft), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (topRight.IsSet && topRight.Value == null)
                throw new ArgumentNullException(nameof(topRight), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            return new GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner(bottomLeft, bottomRight, topLeft, topRight);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomLeftOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomLeft == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomLeft), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomRightOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomRight == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomRight), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopLeftOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopLeft == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopLeft), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopRightOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopRight == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopRight), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomLeftOption.IsSet)
                writer.WriteString("bottomLeft", getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomLeft);

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomRightOption.IsSet)
                writer.WriteString("bottomRight", getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.BottomRight);

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopLeftOption.IsSet)
                writer.WriteString("topLeft", getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopLeft);

            if (getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopRightOption.IsSet)
                writer.WriteString("topRight", getSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner.TopRight);
        }
    }

    /// <summary>
    /// The GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner))]
    public partial class GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInnerSerializationContext : JsonSerializerContext { }
}
