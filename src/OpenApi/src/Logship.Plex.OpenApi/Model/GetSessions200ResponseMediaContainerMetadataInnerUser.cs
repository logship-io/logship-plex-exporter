// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessions200ResponseMediaContainerMetadataInnerUser
    /// </summary>
    public partial class GetSessions200ResponseMediaContainerMetadataInnerUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessions200ResponseMediaContainerMetadataInnerUser" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="thumb">thumb</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public GetSessions200ResponseMediaContainerMetadataInnerUser(Option<string?> id = default, Option<string?> thumb = default, Option<string?> title = default)
        {
            IdOption = id;
            ThumbOption = thumb;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Thumb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThumbOption { get; private set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [JsonPropertyName("thumb")]
        public string? Thumb { get { return this.ThumbOption; } set { this.ThumbOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessions200ResponseMediaContainerMetadataInnerUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessions200ResponseMediaContainerMetadataInnerUser" />
    /// </summary>
    public class GetSessions200ResponseMediaContainerMetadataInnerUserJsonConverter : JsonConverter<GetSessions200ResponseMediaContainerMetadataInnerUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessions200ResponseMediaContainerMetadataInnerUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessions200ResponseMediaContainerMetadataInnerUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> thumb = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumb":
                            thumb = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            if (thumb.IsSet && thumb.Value == null)
                throw new ArgumentNullException(nameof(thumb), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            return new GetSessions200ResponseMediaContainerMetadataInnerUser(id, thumb, title);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessions200ResponseMediaContainerMetadataInnerUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerUser getSessions200ResponseMediaContainerMetadataInnerUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessions200ResponseMediaContainerMetadataInnerUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessions200ResponseMediaContainerMetadataInnerUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerUser getSessions200ResponseMediaContainerMetadataInnerUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessions200ResponseMediaContainerMetadataInnerUser.IdOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUser.Id == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUser.Id), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            if (getSessions200ResponseMediaContainerMetadataInnerUser.ThumbOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUser.Thumb == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUser.Thumb), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            if (getSessions200ResponseMediaContainerMetadataInnerUser.TitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerUser.Title == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerUser.Title), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerUser.");

            if (getSessions200ResponseMediaContainerMetadataInnerUser.IdOption.IsSet)
                writer.WriteString("id", getSessions200ResponseMediaContainerMetadataInnerUser.Id);

            if (getSessions200ResponseMediaContainerMetadataInnerUser.ThumbOption.IsSet)
                writer.WriteString("thumb", getSessions200ResponseMediaContainerMetadataInnerUser.Thumb);

            if (getSessions200ResponseMediaContainerMetadataInnerUser.TitleOption.IsSet)
                writer.WriteString("title", getSessions200ResponseMediaContainerMetadataInnerUser.Title);
        }
    }

    /// <summary>
    /// The GetSessions200ResponseMediaContainerMetadataInnerUserSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessions200ResponseMediaContainerMetadataInnerUser))]
    public partial class GetSessions200ResponseMediaContainerMetadataInnerUserSerializationContext : JsonSerializerContext { }
}
