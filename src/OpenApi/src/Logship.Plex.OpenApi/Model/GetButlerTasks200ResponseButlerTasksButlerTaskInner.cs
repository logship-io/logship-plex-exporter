// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetButlerTasks200ResponseButlerTasksButlerTaskInner
    /// </summary>
    public partial class GetButlerTasks200ResponseButlerTasksButlerTaskInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetButlerTasks200ResponseButlerTasksButlerTaskInner" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="interval">interval</param>
        /// <param name="scheduleRandomized">scheduleRandomized</param>
        /// <param name="enabled">enabled</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        [JsonConstructor]
        public GetButlerTasks200ResponseButlerTasksButlerTaskInner(Option<string?> name = default, Option<decimal?> interval = default, Option<bool?> scheduleRandomized = default, Option<bool?> enabled = default, Option<string?> title = default, Option<string?> description = default)
        {
            NameOption = name;
            IntervalOption = interval;
            ScheduleRandomizedOption = scheduleRandomized;
            EnabledOption = enabled;
            TitleOption = title;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>BackupDatabase</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Interval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        /* <example>3</example> */
        [JsonPropertyName("interval")]
        public decimal? Interval { get { return this.IntervalOption; } set { this.IntervalOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduleRandomized
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ScheduleRandomizedOption { get; private set; }

        /// <summary>
        /// Gets or Sets ScheduleRandomized
        /// </summary>
        [JsonPropertyName("scheduleRandomized")]
        public bool? ScheduleRandomized { get { return this.ScheduleRandomizedOption; } set { this.ScheduleRandomizedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Backup Database</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Create a backup copy of the server&#39;s database in the configured backup directory</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetButlerTasks200ResponseButlerTasksButlerTaskInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  ScheduleRandomized: ").Append(ScheduleRandomized).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetButlerTasks200ResponseButlerTasksButlerTaskInner" />
    /// </summary>
    public class GetButlerTasks200ResponseButlerTasksButlerTaskInnerJsonConverter : JsonConverter<GetButlerTasks200ResponseButlerTasksButlerTaskInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetButlerTasks200ResponseButlerTasksButlerTaskInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetButlerTasks200ResponseButlerTasksButlerTaskInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<decimal?> interval = default;
            Option<bool?> scheduleRandomized = default;
            Option<bool?> enabled = default;
            Option<string?> title = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interval":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                interval = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "scheduleRandomized":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scheduleRandomized = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (interval.IsSet && interval.Value == null)
                throw new ArgumentNullException(nameof(interval), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (scheduleRandomized.IsSet && scheduleRandomized.Value == null)
                throw new ArgumentNullException(nameof(scheduleRandomized), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            return new GetButlerTasks200ResponseButlerTasksButlerTaskInner(name, interval, scheduleRandomized, enabled, title, description);
        }

        /// <summary>
        /// Serializes a <see cref="GetButlerTasks200ResponseButlerTasksButlerTaskInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getButlerTasks200ResponseButlerTasksButlerTaskInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetButlerTasks200ResponseButlerTasksButlerTaskInner getButlerTasks200ResponseButlerTasksButlerTaskInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getButlerTasks200ResponseButlerTasksButlerTaskInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetButlerTasks200ResponseButlerTasksButlerTaskInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getButlerTasks200ResponseButlerTasksButlerTaskInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetButlerTasks200ResponseButlerTasksButlerTaskInner getButlerTasks200ResponseButlerTasksButlerTaskInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.NameOption.IsSet && getButlerTasks200ResponseButlerTasksButlerTaskInner.Name == null)
                throw new ArgumentNullException(nameof(getButlerTasks200ResponseButlerTasksButlerTaskInner.Name), "Property is required for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.TitleOption.IsSet && getButlerTasks200ResponseButlerTasksButlerTaskInner.Title == null)
                throw new ArgumentNullException(nameof(getButlerTasks200ResponseButlerTasksButlerTaskInner.Title), "Property is required for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.DescriptionOption.IsSet && getButlerTasks200ResponseButlerTasksButlerTaskInner.Description == null)
                throw new ArgumentNullException(nameof(getButlerTasks200ResponseButlerTasksButlerTaskInner.Description), "Property is required for class GetButlerTasks200ResponseButlerTasksButlerTaskInner.");

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.NameOption.IsSet)
                writer.WriteString("name", getButlerTasks200ResponseButlerTasksButlerTaskInner.Name);

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.IntervalOption.IsSet)
                writer.WriteNumber("interval", getButlerTasks200ResponseButlerTasksButlerTaskInner.IntervalOption.Value!.Value);

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.ScheduleRandomizedOption.IsSet)
                writer.WriteBoolean("scheduleRandomized", getButlerTasks200ResponseButlerTasksButlerTaskInner.ScheduleRandomizedOption.Value!.Value);

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", getButlerTasks200ResponseButlerTasksButlerTaskInner.EnabledOption.Value!.Value);

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.TitleOption.IsSet)
                writer.WriteString("title", getButlerTasks200ResponseButlerTasksButlerTaskInner.Title);

            if (getButlerTasks200ResponseButlerTasksButlerTaskInner.DescriptionOption.IsSet)
                writer.WriteString("description", getButlerTasks200ResponseButlerTasksButlerTaskInner.Description);
        }
    }

    /// <summary>
    /// The GetButlerTasks200ResponseButlerTasksButlerTaskInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetButlerTasks200ResponseButlerTasksButlerTaskInner))]
    public partial class GetButlerTasks200ResponseButlerTasksButlerTaskInnerSerializationContext : JsonSerializerContext { }
}
