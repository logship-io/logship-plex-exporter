// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessionHistory200ResponseMediaContainerMetadataInner
    /// </summary>
    public partial class GetSessionHistory200ResponseMediaContainerMetadataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessionHistory200ResponseMediaContainerMetadataInner" /> class.
        /// </summary>
        /// <param name="historyKey">historyKey</param>
        /// <param name="key">key</param>
        /// <param name="ratingKey">ratingKey</param>
        /// <param name="librarySectionID">librarySectionID</param>
        /// <param name="parentKey">parentKey</param>
        /// <param name="grandparentKey">grandparentKey</param>
        /// <param name="title">title</param>
        /// <param name="grandparentTitle">grandparentTitle</param>
        /// <param name="type">type</param>
        /// <param name="thumb">thumb</param>
        /// <param name="parentThumb">parentThumb</param>
        /// <param name="grandparentThumb">grandparentThumb</param>
        /// <param name="grandparentArt">grandparentArt</param>
        /// <param name="index">index</param>
        /// <param name="parentIndex">parentIndex</param>
        /// <param name="originallyAvailableAt">originallyAvailableAt</param>
        /// <param name="viewedAt">viewedAt</param>
        /// <param name="accountID">accountID</param>
        /// <param name="deviceID">deviceID</param>
        [JsonConstructor]
        public GetSessionHistory200ResponseMediaContainerMetadataInner(Option<string?> historyKey = default, Option<string?> key = default, Option<string?> ratingKey = default, Option<string?> librarySectionID = default, Option<string?> parentKey = default, Option<string?> grandparentKey = default, Option<string?> title = default, Option<string?> grandparentTitle = default, Option<string?> type = default, Option<string?> thumb = default, Option<string?> parentThumb = default, Option<string?> grandparentThumb = default, Option<string?> grandparentArt = default, Option<int?> index = default, Option<int?> parentIndex = default, Option<DateOnly?> originallyAvailableAt = default, Option<int?> viewedAt = default, Option<int?> accountID = default, Option<int?> deviceID = default)
        {
            HistoryKeyOption = historyKey;
            KeyOption = key;
            RatingKeyOption = ratingKey;
            LibrarySectionIDOption = librarySectionID;
            ParentKeyOption = parentKey;
            GrandparentKeyOption = grandparentKey;
            TitleOption = title;
            GrandparentTitleOption = grandparentTitle;
            TypeOption = type;
            ThumbOption = thumb;
            ParentThumbOption = parentThumb;
            GrandparentThumbOption = grandparentThumb;
            GrandparentArtOption = grandparentArt;
            IndexOption = index;
            ParentIndexOption = parentIndex;
            OriginallyAvailableAtOption = originallyAvailableAt;
            ViewedAtOption = viewedAt;
            AccountIDOption = accountID;
            DeviceIDOption = deviceID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HistoryKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HistoryKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets HistoryKey
        /// </summary>
        /* <example>/status/sessions/history/1</example> */
        [JsonPropertyName("historyKey")]
        public string? HistoryKey { get { return this.HistoryKeyOption; } set { this.HistoryKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /* <example>/library/metadata/32171</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatingKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets RatingKey
        /// </summary>
        /* <example>32171</example> */
        [JsonPropertyName("ratingKey")]
        public string? RatingKey { get { return this.RatingKeyOption; } set { this.RatingKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of LibrarySectionID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LibrarySectionIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets LibrarySectionID
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("librarySectionID")]
        public string? LibrarySectionID { get { return this.LibrarySectionIDOption; } set { this.LibrarySectionIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentKey
        /// </summary>
        /* <example>/library/metadata/32170</example> */
        [JsonPropertyName("parentKey")]
        public string? ParentKey { get { return this.ParentKeyOption; } set { this.ParentKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets GrandparentKey
        /// </summary>
        /* <example>/library/metadata/32132</example> */
        [JsonPropertyName("grandparentKey")]
        public string? GrandparentKey { get { return this.GrandparentKeyOption; } set { this.GrandparentKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>The Noise That Blue Makes</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets GrandparentTitle
        /// </summary>
        /* <example>Taskmaster</example> */
        [JsonPropertyName("grandparentTitle")]
        public string? GrandparentTitle { get { return this.GrandparentTitleOption; } set { this.GrandparentTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>episode</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Thumb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThumbOption { get; private set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        /* <example>/library/metadata/32171/thumb/-1</example> */
        [JsonPropertyName("thumb")]
        public string? Thumb { get { return this.ThumbOption; } set { this.ThumbOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentThumb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentThumbOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentThumb
        /// </summary>
        /* <example>/library/metadata/32170/thumb/1654134301</example> */
        [JsonPropertyName("parentThumb")]
        public string? ParentThumb { get { return this.ParentThumbOption; } set { this.ParentThumbOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentThumb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentThumbOption { get; private set; }

        /// <summary>
        /// Gets or Sets GrandparentThumb
        /// </summary>
        /* <example>/library/metadata/32132/thumb/1703933346</example> */
        [JsonPropertyName("grandparentThumb")]
        public string? GrandparentThumb { get { return this.GrandparentThumbOption; } set { this.GrandparentThumbOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentArt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentArtOption { get; private set; }

        /// <summary>
        /// Gets or Sets GrandparentArt
        /// </summary>
        /* <example>/library/metadata/32132/art/1703933346</example> */
        [JsonPropertyName("grandparentArt")]
        public string? GrandparentArt { get { return this.GrandparentArtOption; } set { this.GrandparentArtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("index")]
        public int? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ParentIndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentIndex
        /// </summary>
        /* <example>13</example> */
        [JsonPropertyName("parentIndex")]
        public int? ParentIndex { get { return this.ParentIndexOption; } set { this.ParentIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginallyAvailableAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> OriginallyAvailableAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginallyAvailableAt
        /// </summary>
        /* <example>2022-04-14T00:00:00.000Z</example> */
        [JsonPropertyName("originallyAvailableAt")]
        public DateOnly? OriginallyAvailableAt { get { return this.OriginallyAvailableAtOption; } set { this.OriginallyAvailableAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ViewedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ViewedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ViewedAt
        /// </summary>
        /* <example>1654139223</example> */
        [JsonPropertyName("viewedAt")]
        public int? ViewedAt { get { return this.ViewedAtOption; } set { this.ViewedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccountIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("accountID")]
        public int? AccountID { get { return this.AccountIDOption; } set { this.AccountIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DeviceIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceID
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("deviceID")]
        public int? DeviceID { get { return this.DeviceIDOption; } set { this.DeviceIDOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessionHistory200ResponseMediaContainerMetadataInner {\n");
            sb.Append("  HistoryKey: ").Append(HistoryKey).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  RatingKey: ").Append(RatingKey).Append("\n");
            sb.Append("  LibrarySectionID: ").Append(LibrarySectionID).Append("\n");
            sb.Append("  ParentKey: ").Append(ParentKey).Append("\n");
            sb.Append("  GrandparentKey: ").Append(GrandparentKey).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  GrandparentTitle: ").Append(GrandparentTitle).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  ParentThumb: ").Append(ParentThumb).Append("\n");
            sb.Append("  GrandparentThumb: ").Append(GrandparentThumb).Append("\n");
            sb.Append("  GrandparentArt: ").Append(GrandparentArt).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  ParentIndex: ").Append(ParentIndex).Append("\n");
            sb.Append("  OriginallyAvailableAt: ").Append(OriginallyAvailableAt).Append("\n");
            sb.Append("  ViewedAt: ").Append(ViewedAt).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  DeviceID: ").Append(DeviceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessionHistory200ResponseMediaContainerMetadataInner" />
    /// </summary>
    public class GetSessionHistory200ResponseMediaContainerMetadataInnerJsonConverter : JsonConverter<GetSessionHistory200ResponseMediaContainerMetadataInner>
    {
        /// <summary>
        /// The format to use to serialize OriginallyAvailableAt
        /// </summary>
        public static string OriginallyAvailableAtFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="GetSessionHistory200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessionHistory200ResponseMediaContainerMetadataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> historyKey = default;
            Option<string?> key = default;
            Option<string?> ratingKey = default;
            Option<string?> librarySectionID = default;
            Option<string?> parentKey = default;
            Option<string?> grandparentKey = default;
            Option<string?> title = default;
            Option<string?> grandparentTitle = default;
            Option<string?> type = default;
            Option<string?> thumb = default;
            Option<string?> parentThumb = default;
            Option<string?> grandparentThumb = default;
            Option<string?> grandparentArt = default;
            Option<int?> index = default;
            Option<int?> parentIndex = default;
            Option<DateOnly?> originallyAvailableAt = default;
            Option<int?> viewedAt = default;
            Option<int?> accountID = default;
            Option<int?> deviceID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "historyKey":
                            historyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ratingKey":
                            ratingKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "librarySectionID":
                            librarySectionID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentKey":
                            parentKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentKey":
                            grandparentKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentTitle":
                            grandparentTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumb":
                            thumb = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentThumb":
                            parentThumb = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentThumb":
                            grandparentThumb = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentArt":
                            grandparentArt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "index":
                            index = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "parentIndex":
                            parentIndex = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "originallyAvailableAt":
                            originallyAvailableAt = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "viewedAt":
                            viewedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "accountID":
                            accountID = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "deviceID":
                            deviceID = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (historyKey.IsSet && historyKey.Value == null)
                throw new ArgumentNullException(nameof(historyKey), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (ratingKey.IsSet && ratingKey.Value == null)
                throw new ArgumentNullException(nameof(ratingKey), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (librarySectionID.IsSet && librarySectionID.Value == null)
                throw new ArgumentNullException(nameof(librarySectionID), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (parentKey.IsSet && parentKey.Value == null)
                throw new ArgumentNullException(nameof(parentKey), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (grandparentKey.IsSet && grandparentKey.Value == null)
                throw new ArgumentNullException(nameof(grandparentKey), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (grandparentTitle.IsSet && grandparentTitle.Value == null)
                throw new ArgumentNullException(nameof(grandparentTitle), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (thumb.IsSet && thumb.Value == null)
                throw new ArgumentNullException(nameof(thumb), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (parentThumb.IsSet && parentThumb.Value == null)
                throw new ArgumentNullException(nameof(parentThumb), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (grandparentThumb.IsSet && grandparentThumb.Value == null)
                throw new ArgumentNullException(nameof(grandparentThumb), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (grandparentArt.IsSet && grandparentArt.Value == null)
                throw new ArgumentNullException(nameof(grandparentArt), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (index.IsSet && index.Value == null)
                throw new ArgumentNullException(nameof(index), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (parentIndex.IsSet && parentIndex.Value == null)
                throw new ArgumentNullException(nameof(parentIndex), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (originallyAvailableAt.IsSet && originallyAvailableAt.Value == null)
                throw new ArgumentNullException(nameof(originallyAvailableAt), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (viewedAt.IsSet && viewedAt.Value == null)
                throw new ArgumentNullException(nameof(viewedAt), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (accountID.IsSet && accountID.Value == null)
                throw new ArgumentNullException(nameof(accountID), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (deviceID.IsSet && deviceID.Value == null)
                throw new ArgumentNullException(nameof(deviceID), "Property is not nullable for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            return new GetSessionHistory200ResponseMediaContainerMetadataInner(historyKey, key, ratingKey, librarySectionID, parentKey, grandparentKey, title, grandparentTitle, type, thumb, parentThumb, grandparentThumb, grandparentArt, index, parentIndex, originallyAvailableAt, viewedAt, accountID, deviceID);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessionHistory200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessionHistory200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessionHistory200ResponseMediaContainerMetadataInner getSessionHistory200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessionHistory200ResponseMediaContainerMetadataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessionHistory200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessionHistory200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessionHistory200ResponseMediaContainerMetadataInner getSessionHistory200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessionHistory200ResponseMediaContainerMetadataInner.HistoryKeyOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.HistoryKey == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.HistoryKey), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.KeyOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.Key == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.Key), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.RatingKey == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.RatingKey), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.LibrarySectionIDOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.LibrarySectionID == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.LibrarySectionID), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ParentKeyOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.ParentKey == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.ParentKey), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentKeyOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentKey == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentKey), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.TitleOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.Title == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.Title), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentTitleOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentTitle == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentTitle), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.TypeOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.Type == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.Type), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ThumbOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.Thumb == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.Thumb), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ParentThumbOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.ParentThumb == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.ParentThumb), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentThumbOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentThumb == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentThumb), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentArtOption.IsSet && getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentArt == null)
                throw new ArgumentNullException(nameof(getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentArt), "Property is required for class GetSessionHistory200ResponseMediaContainerMetadataInner.");

            if (getSessionHistory200ResponseMediaContainerMetadataInner.HistoryKeyOption.IsSet)
                writer.WriteString("historyKey", getSessionHistory200ResponseMediaContainerMetadataInner.HistoryKey);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.KeyOption.IsSet)
                writer.WriteString("key", getSessionHistory200ResponseMediaContainerMetadataInner.Key);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet)
                writer.WriteString("ratingKey", getSessionHistory200ResponseMediaContainerMetadataInner.RatingKey);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.LibrarySectionIDOption.IsSet)
                writer.WriteString("librarySectionID", getSessionHistory200ResponseMediaContainerMetadataInner.LibrarySectionID);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ParentKeyOption.IsSet)
                writer.WriteString("parentKey", getSessionHistory200ResponseMediaContainerMetadataInner.ParentKey);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentKeyOption.IsSet)
                writer.WriteString("grandparentKey", getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentKey);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.TitleOption.IsSet)
                writer.WriteString("title", getSessionHistory200ResponseMediaContainerMetadataInner.Title);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentTitleOption.IsSet)
                writer.WriteString("grandparentTitle", getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentTitle);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.TypeOption.IsSet)
                writer.WriteString("type", getSessionHistory200ResponseMediaContainerMetadataInner.Type);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ThumbOption.IsSet)
                writer.WriteString("thumb", getSessionHistory200ResponseMediaContainerMetadataInner.Thumb);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ParentThumbOption.IsSet)
                writer.WriteString("parentThumb", getSessionHistory200ResponseMediaContainerMetadataInner.ParentThumb);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentThumbOption.IsSet)
                writer.WriteString("grandparentThumb", getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentThumb);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentArtOption.IsSet)
                writer.WriteString("grandparentArt", getSessionHistory200ResponseMediaContainerMetadataInner.GrandparentArt);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.IndexOption.IsSet)
                writer.WriteNumber("index", getSessionHistory200ResponseMediaContainerMetadataInner.IndexOption.Value!.Value);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ParentIndexOption.IsSet)
                writer.WriteNumber("parentIndex", getSessionHistory200ResponseMediaContainerMetadataInner.ParentIndexOption.Value!.Value);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.OriginallyAvailableAtOption.IsSet)
                writer.WriteString("originallyAvailableAt", getSessionHistory200ResponseMediaContainerMetadataInner.OriginallyAvailableAtOption.Value!.Value.ToString(OriginallyAvailableAtFormat));

            if (getSessionHistory200ResponseMediaContainerMetadataInner.ViewedAtOption.IsSet)
                writer.WriteNumber("viewedAt", getSessionHistory200ResponseMediaContainerMetadataInner.ViewedAtOption.Value!.Value);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.AccountIDOption.IsSet)
                writer.WriteNumber("accountID", getSessionHistory200ResponseMediaContainerMetadataInner.AccountIDOption.Value!.Value);

            if (getSessionHistory200ResponseMediaContainerMetadataInner.DeviceIDOption.IsSet)
                writer.WriteNumber("deviceID", getSessionHistory200ResponseMediaContainerMetadataInner.DeviceIDOption.Value!.Value);
        }
    }

    /// <summary>
    /// The GetSessionHistory200ResponseMediaContainerMetadataInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessionHistory200ResponseMediaContainerMetadataInner))]
    public partial class GetSessionHistory200ResponseMediaContainerMetadataInnerSerializationContext : JsonSerializerContext { }
}
