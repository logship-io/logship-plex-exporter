// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetResourcesStatistics200ResponseMediaContainer
    /// </summary>
    public partial class GetResourcesStatistics200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetResourcesStatistics200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="statisticsResources">statisticsResources</param>
        [JsonConstructor]
        public GetResourcesStatistics200ResponseMediaContainer(Option<long?> size = default, Option<List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>?> statisticsResources = default)
        {
            SizeOption = size;
            StatisticsResourcesOption = statisticsResources;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatisticsResources
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>?> StatisticsResourcesOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatisticsResources
        /// </summary>
        [JsonPropertyName("StatisticsResources")]
        public List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>? StatisticsResources { get { return this.StatisticsResourcesOption; } set { this.StatisticsResourcesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetResourcesStatistics200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  StatisticsResources: ").Append(StatisticsResources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetResourcesStatistics200ResponseMediaContainer" />
    /// </summary>
    public class GetResourcesStatistics200ResponseMediaContainerJsonConverter : JsonConverter<GetResourcesStatistics200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetResourcesStatistics200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetResourcesStatistics200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> size = default;
            Option<List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>?> statisticsResources = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(JsonSerializer.Deserialize<long>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "StatisticsResources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                statisticsResources = new Option<List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>?>(JsonSerializer.Deserialize<List<GetResourcesStatistics200ResponseMediaContainerStatisticsResourcesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetResourcesStatistics200ResponseMediaContainer.");

            if (statisticsResources.IsSet && statisticsResources.Value == null)
                throw new ArgumentNullException(nameof(statisticsResources), "Property is not nullable for class GetResourcesStatistics200ResponseMediaContainer.");

            return new GetResourcesStatistics200ResponseMediaContainer(size, statisticsResources);
        }

        /// <summary>
        /// Serializes a <see cref="GetResourcesStatistics200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getResourcesStatistics200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetResourcesStatistics200ResponseMediaContainer getResourcesStatistics200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getResourcesStatistics200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetResourcesStatistics200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getResourcesStatistics200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetResourcesStatistics200ResponseMediaContainer getResourcesStatistics200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getResourcesStatistics200ResponseMediaContainer.StatisticsResourcesOption.IsSet && getResourcesStatistics200ResponseMediaContainer.StatisticsResources == null)
                throw new ArgumentNullException(nameof(getResourcesStatistics200ResponseMediaContainer.StatisticsResources), "Property is required for class GetResourcesStatistics200ResponseMediaContainer.");

            if (getResourcesStatistics200ResponseMediaContainer.SizeOption.IsSet)
            {
                writer.WritePropertyName("size");
                JsonSerializer.Serialize(writer, getResourcesStatistics200ResponseMediaContainer.Size, jsonSerializerOptions);
            }
            if (getResourcesStatistics200ResponseMediaContainer.StatisticsResourcesOption.IsSet)
            {
                writer.WritePropertyName("StatisticsResources");
                JsonSerializer.Serialize(writer, getResourcesStatistics200ResponseMediaContainer.StatisticsResources, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetResourcesStatistics200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetResourcesStatistics200ResponseMediaContainer))]
    public partial class GetResourcesStatistics200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
