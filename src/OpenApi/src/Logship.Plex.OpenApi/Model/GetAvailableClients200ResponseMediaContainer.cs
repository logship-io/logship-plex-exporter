// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetAvailableClients200ResponseMediaContainer
    /// </summary>
    public partial class GetAvailableClients200ResponseMediaContainer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAvailableClients200ResponseMediaContainer" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="server">server</param>
        [JsonConstructor]
        public GetAvailableClients200ResponseMediaContainer(Option<decimal?> size = default, Option<List<GetAvailableClients200ResponseMediaContainerServerInner>?> server = default)
        {
            SizeOption = size;
            ServerOption = server;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("size")]
        public decimal? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetAvailableClients200ResponseMediaContainerServerInner>?> ServerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [JsonPropertyName("Server")]
        public List<GetAvailableClients200ResponseMediaContainerServerInner>? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAvailableClients200ResponseMediaContainer {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAvailableClients200ResponseMediaContainer" />
    /// </summary>
    public class GetAvailableClients200ResponseMediaContainerJsonConverter : JsonConverter<GetAvailableClients200ResponseMediaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAvailableClients200ResponseMediaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAvailableClients200ResponseMediaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> size = default;
            Option<List<GetAvailableClients200ResponseMediaContainerServerInner>?> server = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Server":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                server = new Option<List<GetAvailableClients200ResponseMediaContainerServerInner>?>(JsonSerializer.Deserialize<List<GetAvailableClients200ResponseMediaContainerServerInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class GetAvailableClients200ResponseMediaContainer.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class GetAvailableClients200ResponseMediaContainer.");

            return new GetAvailableClients200ResponseMediaContainer(size, server);
        }

        /// <summary>
        /// Serializes a <see cref="GetAvailableClients200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAvailableClients200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAvailableClients200ResponseMediaContainer getAvailableClients200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAvailableClients200ResponseMediaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAvailableClients200ResponseMediaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAvailableClients200ResponseMediaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAvailableClients200ResponseMediaContainer getAvailableClients200ResponseMediaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAvailableClients200ResponseMediaContainer.ServerOption.IsSet && getAvailableClients200ResponseMediaContainer.Server == null)
                throw new ArgumentNullException(nameof(getAvailableClients200ResponseMediaContainer.Server), "Property is required for class GetAvailableClients200ResponseMediaContainer.");

            if (getAvailableClients200ResponseMediaContainer.SizeOption.IsSet)
                writer.WriteNumber("size", getAvailableClients200ResponseMediaContainer.SizeOption.Value!.Value);

            if (getAvailableClients200ResponseMediaContainer.ServerOption.IsSet)
            {
                writer.WritePropertyName("Server");
                JsonSerializer.Serialize(writer, getAvailableClients200ResponseMediaContainer.Server, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetAvailableClients200ResponseMediaContainerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetAvailableClients200ResponseMediaContainer))]
    public partial class GetAvailableClients200ResponseMediaContainerSerializationContext : JsonSerializerContext { }
}
