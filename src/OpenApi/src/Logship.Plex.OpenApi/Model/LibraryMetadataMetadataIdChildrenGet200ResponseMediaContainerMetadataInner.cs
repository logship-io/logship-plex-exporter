// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner
    /// </summary>
    public partial class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner" /> class.
        /// </summary>
        /// <param name="title">Title of the media item</param>
        /// <param name="type">Media type (e.g., season, episode)</param>
        /// <param name="duration">Duration of the media item in milliseconds</param>
        /// <param name="ratingKey">Unique rating key for the item</param>
        /// <param name="summary">Description or summary of the media item</param>
        /// <param name="index">Index number (season/episode number)</param>
        /// <param name="parentIndex">Parent index number</param>
        /// <param name="year">Year the media was released</param>
        /// <param name="parentRatingKey">Rating key of the parent item</param>
        /// <param name="grandparentRatingKey">Rating key of the grandparent item</param>
        /// <param name="parentTitle">Title of the parent item</param>
        /// <param name="grandparentTitle">Title of the grandparent item</param>
        [JsonConstructor]
        public LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner(Option<string?> title = default, Option<string?> type = default, Option<int?> duration = default, Option<string?> ratingKey = default, Option<string?> summary = default, Option<int?> index = default, Option<int?> parentIndex = default, Option<int?> year = default, Option<string?> parentRatingKey = default, Option<string?> grandparentRatingKey = default, Option<string?> parentTitle = default, Option<string?> grandparentTitle = default)
        {
            TitleOption = title;
            TypeOption = type;
            DurationOption = duration;
            RatingKeyOption = ratingKey;
            SummaryOption = summary;
            IndexOption = index;
            ParentIndexOption = parentIndex;
            YearOption = year;
            ParentRatingKeyOption = parentRatingKey;
            GrandparentRatingKeyOption = grandparentRatingKey;
            ParentTitleOption = parentTitle;
            GrandparentTitleOption = grandparentTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Title of the media item
        /// </summary>
        /// <value>Title of the media item</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Media type (e.g., season, episode)
        /// </summary>
        /// <value>Media type (e.g., season, episode)</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// Duration of the media item in milliseconds
        /// </summary>
        /// <value>Duration of the media item in milliseconds</value>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatingKeyOption { get; private set; }

        /// <summary>
        /// Unique rating key for the item
        /// </summary>
        /// <value>Unique rating key for the item</value>
        [JsonPropertyName("ratingKey")]
        public string? RatingKey { get { return this.RatingKeyOption; } set { this.RatingKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Summary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SummaryOption { get; private set; }

        /// <summary>
        /// Description or summary of the media item
        /// </summary>
        /// <value>Description or summary of the media item</value>
        [JsonPropertyName("summary")]
        public string? Summary { get { return this.SummaryOption; } set { this.SummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IndexOption { get; private set; }

        /// <summary>
        /// Index number (season/episode number)
        /// </summary>
        /// <value>Index number (season/episode number)</value>
        [JsonPropertyName("index")]
        public int? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ParentIndexOption { get; private set; }

        /// <summary>
        /// Parent index number
        /// </summary>
        /// <value>Parent index number</value>
        [JsonPropertyName("parentIndex")]
        public int? ParentIndex { get { return this.ParentIndexOption; } set { this.ParentIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Year
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YearOption { get; private set; }

        /// <summary>
        /// Year the media was released
        /// </summary>
        /// <value>Year the media was released</value>
        [JsonPropertyName("year")]
        public int? Year { get { return this.YearOption; } set { this.YearOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentRatingKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentRatingKeyOption { get; private set; }

        /// <summary>
        /// Rating key of the parent item
        /// </summary>
        /// <value>Rating key of the parent item</value>
        [JsonPropertyName("parentRatingKey")]
        public string? ParentRatingKey { get { return this.ParentRatingKeyOption; } set { this.ParentRatingKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentRatingKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentRatingKeyOption { get; private set; }

        /// <summary>
        /// Rating key of the grandparent item
        /// </summary>
        /// <value>Rating key of the grandparent item</value>
        [JsonPropertyName("grandparentRatingKey")]
        public string? GrandparentRatingKey { get { return this.GrandparentRatingKeyOption; } set { this.GrandparentRatingKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentTitleOption { get; private set; }

        /// <summary>
        /// Title of the parent item
        /// </summary>
        /// <value>Title of the parent item</value>
        [JsonPropertyName("parentTitle")]
        public string? ParentTitle { get { return this.ParentTitleOption; } set { this.ParentTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of GrandparentTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GrandparentTitleOption { get; private set; }

        /// <summary>
        /// Title of the grandparent item
        /// </summary>
        /// <value>Title of the grandparent item</value>
        [JsonPropertyName("grandparentTitle")]
        public string? GrandparentTitle { get { return this.GrandparentTitleOption; } set { this.GrandparentTitleOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  RatingKey: ").Append(RatingKey).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  ParentIndex: ").Append(ParentIndex).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  ParentRatingKey: ").Append(ParentRatingKey).Append("\n");
            sb.Append("  GrandparentRatingKey: ").Append(GrandparentRatingKey).Append("\n");
            sb.Append("  ParentTitle: ").Append(ParentTitle).Append("\n");
            sb.Append("  GrandparentTitle: ").Append(GrandparentTitle).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner" />
    /// </summary>
    public class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInnerJsonConverter : JsonConverter<LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<int?> duration = default;
            Option<string?> ratingKey = default;
            Option<string?> summary = default;
            Option<int?> index = default;
            Option<int?> parentIndex = default;
            Option<int?> year = default;
            Option<string?> parentRatingKey = default;
            Option<string?> grandparentRatingKey = default;
            Option<string?> parentTitle = default;
            Option<string?> grandparentTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                duration = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ratingKey":
                            ratingKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "summary":
                            summary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "index":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                index = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "parentIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parentIndex = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "year":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                year = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "parentRatingKey":
                            parentRatingKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentRatingKey":
                            grandparentRatingKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentTitle":
                            parentTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "grandparentTitle":
                            grandparentTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (ratingKey.IsSet && ratingKey.Value == null)
                throw new ArgumentNullException(nameof(ratingKey), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (index.IsSet && index.Value == null)
                throw new ArgumentNullException(nameof(index), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (parentIndex.IsSet && parentIndex.Value == null)
                throw new ArgumentNullException(nameof(parentIndex), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (year.IsSet && year.Value == null)
                throw new ArgumentNullException(nameof(year), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (parentRatingKey.IsSet && parentRatingKey.Value == null)
                throw new ArgumentNullException(nameof(parentRatingKey), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (grandparentRatingKey.IsSet && grandparentRatingKey.Value == null)
                throw new ArgumentNullException(nameof(grandparentRatingKey), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (parentTitle.IsSet && parentTitle.Value == null)
                throw new ArgumentNullException(nameof(parentTitle), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (grandparentTitle.IsSet && grandparentTitle.Value == null)
                throw new ArgumentNullException(nameof(grandparentTitle), "Property is not nullable for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            return new LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner(title, type, duration, ratingKey, summary, index, parentIndex, year, parentRatingKey, grandparentRatingKey, parentTitle, grandparentTitle);
        }

        /// <summary>
        /// Serializes a <see cref="LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.TitleOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Title == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Title), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.TypeOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Type == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Type), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.RatingKey == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.RatingKey), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.SummaryOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Summary == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Summary), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentRatingKeyOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentRatingKey == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentRatingKey), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentRatingKeyOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentRatingKey == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentRatingKey), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentTitleOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentTitle == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentTitle), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentTitleOption.IsSet && libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentTitle == null)
                throw new ArgumentNullException(nameof(libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentTitle), "Property is required for class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.");

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.TitleOption.IsSet)
                writer.WriteString("title", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Title);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.TypeOption.IsSet)
                writer.WriteString("type", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Type);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.DurationOption.IsSet)
                writer.WriteNumber("duration", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.DurationOption.Value!.Value);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet)
                writer.WriteString("ratingKey", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.RatingKey);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.SummaryOption.IsSet)
                writer.WriteString("summary", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.Summary);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.IndexOption.IsSet)
                writer.WriteNumber("index", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.IndexOption.Value!.Value);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentIndexOption.IsSet)
                writer.WriteNumber("parentIndex", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentIndexOption.Value!.Value);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.YearOption.IsSet)
                writer.WriteNumber("year", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.YearOption.Value!.Value);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentRatingKeyOption.IsSet)
                writer.WriteString("parentRatingKey", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentRatingKey);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentRatingKeyOption.IsSet)
                writer.WriteString("grandparentRatingKey", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentRatingKey);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentTitleOption.IsSet)
                writer.WriteString("parentTitle", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.ParentTitle);

            if (libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentTitleOption.IsSet)
                writer.WriteString("grandparentTitle", libraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner.GrandparentTitle);
        }
    }

    /// <summary>
    /// The LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInner))]
    public partial class LibraryMetadataMetadataIdChildrenGet200ResponseMediaContainerMetadataInnerSerializationContext : JsonSerializerContext { }
}
