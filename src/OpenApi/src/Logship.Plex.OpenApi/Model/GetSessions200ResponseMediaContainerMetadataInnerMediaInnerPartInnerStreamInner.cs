// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner
    /// </summary>
    public partial class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner" /> class.
        /// </summary>
        /// <param name="bitDepth">bitDepth</param>
        /// <param name="bitrate">bitrate</param>
        /// <param name="chromaLocation">chromaLocation</param>
        /// <param name="chromaSubsampling">chromaSubsampling</param>
        /// <param name="codec">codec</param>
        /// <param name="codedHeight">codedHeight</param>
        /// <param name="codedWidth">codedWidth</param>
        /// <param name="colorPrimaries">colorPrimaries</param>
        /// <param name="colorRange">colorRange</param>
        /// <param name="colorSpace">colorSpace</param>
        /// <param name="colorTrc">colorTrc</param>
        /// <param name="default">default</param>
        /// <param name="displayTitle">displayTitle</param>
        /// <param name="extendedDisplayTitle">extendedDisplayTitle</param>
        /// <param name="frameRate">frameRate</param>
        /// <param name="height">height</param>
        /// <param name="id">id</param>
        /// <param name="index">index</param>
        /// <param name="language">language</param>
        /// <param name="languageCode">languageCode</param>
        /// <param name="languageTag">languageTag</param>
        /// <param name="level">level</param>
        /// <param name="original">original</param>
        /// <param name="profile">profile</param>
        /// <param name="refFrames">refFrames</param>
        /// <param name="scanType">scanType</param>
        /// <param name="streamType">streamType</param>
        /// <param name="title">title</param>
        /// <param name="width">width</param>
        /// <param name="location">location</param>
        /// <param name="audioChannelLayout">audioChannelLayout</param>
        /// <param name="channels">channels</param>
        /// <param name="samplingRate">samplingRate</param>
        /// <param name="selected">selected</param>
        [JsonConstructor]
        public GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner(Option<int?> bitDepth = default, Option<int?> bitrate = default, Option<string?> chromaLocation = default, Option<string?> chromaSubsampling = default, Option<string?> codec = default, Option<int?> codedHeight = default, Option<int?> codedWidth = default, Option<string?> colorPrimaries = default, Option<string?> colorRange = default, Option<string?> colorSpace = default, Option<string?> colorTrc = default, Option<bool?> @default = default, Option<string?> displayTitle = default, Option<string?> extendedDisplayTitle = default, Option<decimal?> frameRate = default, Option<int?> height = default, Option<string?> id = default, Option<int?> index = default, Option<string?> language = default, Option<string?> languageCode = default, Option<string?> languageTag = default, Option<int?> level = default, Option<bool?> original = default, Option<string?> profile = default, Option<int?> refFrames = default, Option<string?> scanType = default, Option<int?> streamType = default, Option<string?> title = default, Option<int?> width = default, Option<string?> location = default, Option<string?> audioChannelLayout = default, Option<int?> channels = default, Option<int?> samplingRate = default, Option<bool?> selected = default)
        {
            BitDepthOption = bitDepth;
            BitrateOption = bitrate;
            ChromaLocationOption = chromaLocation;
            ChromaSubsamplingOption = chromaSubsampling;
            CodecOption = codec;
            CodedHeightOption = codedHeight;
            CodedWidthOption = codedWidth;
            ColorPrimariesOption = colorPrimaries;
            ColorRangeOption = colorRange;
            ColorSpaceOption = colorSpace;
            ColorTrcOption = colorTrc;
            DefaultOption = @default;
            DisplayTitleOption = displayTitle;
            ExtendedDisplayTitleOption = extendedDisplayTitle;
            FrameRateOption = frameRate;
            HeightOption = height;
            IdOption = id;
            IndexOption = index;
            LanguageOption = language;
            LanguageCodeOption = languageCode;
            LanguageTagOption = languageTag;
            LevelOption = level;
            OriginalOption = original;
            ProfileOption = profile;
            RefFramesOption = refFrames;
            ScanTypeOption = scanType;
            StreamTypeOption = streamType;
            TitleOption = title;
            WidthOption = width;
            LocationOption = location;
            AudioChannelLayoutOption = audioChannelLayout;
            ChannelsOption = channels;
            SamplingRateOption = samplingRate;
            SelectedOption = selected;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BitDepth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BitDepthOption { get; private set; }

        /// <summary>
        /// Gets or Sets BitDepth
        /// </summary>
        [JsonPropertyName("bitDepth")]
        public int? BitDepth { get { return this.BitDepthOption; } set { this.BitDepthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bitrate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BitrateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bitrate
        /// </summary>
        [JsonPropertyName("bitrate")]
        public int? Bitrate { get { return this.BitrateOption; } set { this.BitrateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChromaLocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChromaLocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChromaLocation
        /// </summary>
        [JsonPropertyName("chromaLocation")]
        public string? ChromaLocation { get { return this.ChromaLocationOption; } set { this.ChromaLocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChromaSubsampling
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChromaSubsamplingOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChromaSubsampling
        /// </summary>
        [JsonPropertyName("chromaSubsampling")]
        public string? ChromaSubsampling { get { return this.ChromaSubsamplingOption; } set { this.ChromaSubsamplingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Codec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodecOption { get; private set; }

        /// <summary>
        /// Gets or Sets Codec
        /// </summary>
        [JsonPropertyName("codec")]
        public string? Codec { get { return this.CodecOption; } set { this.CodecOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodedHeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodedHeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodedHeight
        /// </summary>
        [JsonPropertyName("codedHeight")]
        public int? CodedHeight { get { return this.CodedHeightOption; } set { this.CodedHeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodedWidth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodedWidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodedWidth
        /// </summary>
        [JsonPropertyName("codedWidth")]
        public int? CodedWidth { get { return this.CodedWidthOption; } set { this.CodedWidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorPrimaries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorPrimariesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorPrimaries
        /// </summary>
        [JsonPropertyName("colorPrimaries")]
        public string? ColorPrimaries { get { return this.ColorPrimariesOption; } set { this.ColorPrimariesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorRange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorRangeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorRange
        /// </summary>
        [JsonPropertyName("colorRange")]
        public string? ColorRange { get { return this.ColorRangeOption; } set { this.ColorRangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorSpace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorSpaceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorSpace
        /// </summary>
        [JsonPropertyName("colorSpace")]
        public string? ColorSpace { get { return this.ColorSpaceOption; } set { this.ColorSpaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorTrc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorTrcOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorTrc
        /// </summary>
        [JsonPropertyName("colorTrc")]
        public string? ColorTrc { get { return this.ColorTrcOption; } set { this.ColorTrcOption = new(value); } }

        /// <summary>
        /// Used to track the state of Default
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefaultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [JsonPropertyName("default")]
        public bool? Default { get { return this.DefaultOption; } set { this.DefaultOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayTitle
        /// </summary>
        [JsonPropertyName("displayTitle")]
        public string? DisplayTitle { get { return this.DisplayTitleOption; } set { this.DisplayTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtendedDisplayTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExtendedDisplayTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtendedDisplayTitle
        /// </summary>
        [JsonPropertyName("extendedDisplayTitle")]
        public string? ExtendedDisplayTitle { get { return this.ExtendedDisplayTitleOption; } set { this.ExtendedDisplayTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of FrameRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FrameRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets FrameRate
        /// </summary>
        [JsonPropertyName("frameRate")]
        public decimal? FrameRate { get { return this.FrameRateOption; } set { this.FrameRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get { return this.HeightOption; } set { this.HeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [JsonPropertyName("index")]
        public int? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of LanguageCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [JsonPropertyName("languageCode")]
        public string? LanguageCode { get { return this.LanguageCodeOption; } set { this.LanguageCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LanguageTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets LanguageTag
        /// </summary>
        [JsonPropertyName("languageTag")]
        public string? LanguageTag { get { return this.LanguageTagOption; } set { this.LanguageTagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [JsonPropertyName("level")]
        public int? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Original
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OriginalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Original
        /// </summary>
        [JsonPropertyName("original")]
        public bool? Original { get { return this.OriginalOption; } set { this.OriginalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Profile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProfileOption { get; private set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [JsonPropertyName("profile")]
        public string? Profile { get { return this.ProfileOption; } set { this.ProfileOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefFrames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RefFramesOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefFrames
        /// </summary>
        [JsonPropertyName("refFrames")]
        public int? RefFrames { get { return this.RefFramesOption; } set { this.RefFramesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScanType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScanTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ScanType
        /// </summary>
        [JsonPropertyName("scanType")]
        public string? ScanType { get { return this.ScanTypeOption; } set { this.ScanTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StreamType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StreamTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StreamType
        /// </summary>
        [JsonPropertyName("streamType")]
        public int? StreamType { get { return this.StreamTypeOption; } set { this.StreamTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [JsonPropertyName("width")]
        public int? Width { get { return this.WidthOption; } set { this.WidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudioChannelLayout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AudioChannelLayoutOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudioChannelLayout
        /// </summary>
        [JsonPropertyName("audioChannelLayout")]
        public string? AudioChannelLayout { get { return this.AudioChannelLayoutOption; } set { this.AudioChannelLayoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of Channels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChannelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [JsonPropertyName("channels")]
        public int? Channels { get { return this.ChannelsOption; } set { this.ChannelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SamplingRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SamplingRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SamplingRate
        /// </summary>
        [JsonPropertyName("samplingRate")]
        public int? SamplingRate { get { return this.SamplingRateOption; } set { this.SamplingRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Selected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SelectedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [JsonPropertyName("selected")]
        public bool? Selected { get { return this.SelectedOption; } set { this.SelectedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner {\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  ChromaLocation: ").Append(ChromaLocation).Append("\n");
            sb.Append("  ChromaSubsampling: ").Append(ChromaSubsampling).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodedHeight: ").Append(CodedHeight).Append("\n");
            sb.Append("  CodedWidth: ").Append(CodedWidth).Append("\n");
            sb.Append("  ColorPrimaries: ").Append(ColorPrimaries).Append("\n");
            sb.Append("  ColorRange: ").Append(ColorRange).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  ColorTrc: ").Append(ColorTrc).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  ExtendedDisplayTitle: ").Append(ExtendedDisplayTitle).Append("\n");
            sb.Append("  FrameRate: ").Append(FrameRate).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageTag: ").Append(LanguageTag).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Original: ").Append(Original).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  RefFrames: ").Append(RefFrames).Append("\n");
            sb.Append("  ScanType: ").Append(ScanType).Append("\n");
            sb.Append("  StreamType: ").Append(StreamType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AudioChannelLayout: ").Append(AudioChannelLayout).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  SamplingRate: ").Append(SamplingRate).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner" />
    /// </summary>
    public class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInnerJsonConverter : JsonConverter<GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> bitDepth = default;
            Option<int?> bitrate = default;
            Option<string?> chromaLocation = default;
            Option<string?> chromaSubsampling = default;
            Option<string?> codec = default;
            Option<int?> codedHeight = default;
            Option<int?> codedWidth = default;
            Option<string?> colorPrimaries = default;
            Option<string?> colorRange = default;
            Option<string?> colorSpace = default;
            Option<string?> colorTrc = default;
            Option<bool?> varDefault = default;
            Option<string?> displayTitle = default;
            Option<string?> extendedDisplayTitle = default;
            Option<decimal?> frameRate = default;
            Option<int?> height = default;
            Option<string?> id = default;
            Option<int?> index = default;
            Option<string?> language = default;
            Option<string?> languageCode = default;
            Option<string?> languageTag = default;
            Option<int?> level = default;
            Option<bool?> original = default;
            Option<string?> profile = default;
            Option<int?> refFrames = default;
            Option<string?> scanType = default;
            Option<int?> streamType = default;
            Option<string?> title = default;
            Option<int?> width = default;
            Option<string?> location = default;
            Option<string?> audioChannelLayout = default;
            Option<int?> channels = default;
            Option<int?> samplingRate = default;
            Option<bool?> selected = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bitDepth":
                            bitDepth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bitrate":
                            bitrate = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "chromaLocation":
                            chromaLocation = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chromaSubsampling":
                            chromaSubsampling = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codec":
                            codec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codedHeight":
                            codedHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "codedWidth":
                            codedWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "colorPrimaries":
                            colorPrimaries = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "colorRange":
                            colorRange = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "colorSpace":
                            colorSpace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "colorTrc":
                            colorTrc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "default":
                            varDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "displayTitle":
                            displayTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extendedDisplayTitle":
                            extendedDisplayTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "frameRate":
                            frameRate = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "height":
                            height = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "index":
                            index = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "languageCode":
                            languageCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "languageTag":
                            languageTag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "level":
                            level = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "original":
                            original = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "profile":
                            profile = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "refFrames":
                            refFrames = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "scanType":
                            scanType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "streamType":
                            streamType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            width = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audioChannelLayout":
                            audioChannelLayout = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "channels":
                            channels = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "samplingRate":
                            samplingRate = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "selected":
                            selected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bitDepth.IsSet && bitDepth.Value == null)
                throw new ArgumentNullException(nameof(bitDepth), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (bitrate.IsSet && bitrate.Value == null)
                throw new ArgumentNullException(nameof(bitrate), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (chromaLocation.IsSet && chromaLocation.Value == null)
                throw new ArgumentNullException(nameof(chromaLocation), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (chromaSubsampling.IsSet && chromaSubsampling.Value == null)
                throw new ArgumentNullException(nameof(chromaSubsampling), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (codec.IsSet && codec.Value == null)
                throw new ArgumentNullException(nameof(codec), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (codedHeight.IsSet && codedHeight.Value == null)
                throw new ArgumentNullException(nameof(codedHeight), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (codedWidth.IsSet && codedWidth.Value == null)
                throw new ArgumentNullException(nameof(codedWidth), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (colorPrimaries.IsSet && colorPrimaries.Value == null)
                throw new ArgumentNullException(nameof(colorPrimaries), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (colorRange.IsSet && colorRange.Value == null)
                throw new ArgumentNullException(nameof(colorRange), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (colorSpace.IsSet && colorSpace.Value == null)
                throw new ArgumentNullException(nameof(colorSpace), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (colorTrc.IsSet && colorTrc.Value == null)
                throw new ArgumentNullException(nameof(colorTrc), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (varDefault.IsSet && varDefault.Value == null)
                throw new ArgumentNullException(nameof(varDefault), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (displayTitle.IsSet && displayTitle.Value == null)
                throw new ArgumentNullException(nameof(displayTitle), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (extendedDisplayTitle.IsSet && extendedDisplayTitle.Value == null)
                throw new ArgumentNullException(nameof(extendedDisplayTitle), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (frameRate.IsSet && frameRate.Value == null)
                throw new ArgumentNullException(nameof(frameRate), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (index.IsSet && index.Value == null)
                throw new ArgumentNullException(nameof(index), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (languageCode.IsSet && languageCode.Value == null)
                throw new ArgumentNullException(nameof(languageCode), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (languageTag.IsSet && languageTag.Value == null)
                throw new ArgumentNullException(nameof(languageTag), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (original.IsSet && original.Value == null)
                throw new ArgumentNullException(nameof(original), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (profile.IsSet && profile.Value == null)
                throw new ArgumentNullException(nameof(profile), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (refFrames.IsSet && refFrames.Value == null)
                throw new ArgumentNullException(nameof(refFrames), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (scanType.IsSet && scanType.Value == null)
                throw new ArgumentNullException(nameof(scanType), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (streamType.IsSet && streamType.Value == null)
                throw new ArgumentNullException(nameof(streamType), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (audioChannelLayout.IsSet && audioChannelLayout.Value == null)
                throw new ArgumentNullException(nameof(audioChannelLayout), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (channels.IsSet && channels.Value == null)
                throw new ArgumentNullException(nameof(channels), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (samplingRate.IsSet && samplingRate.Value == null)
                throw new ArgumentNullException(nameof(samplingRate), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (selected.IsSet && selected.Value == null)
                throw new ArgumentNullException(nameof(selected), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            return new GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner(bitDepth, bitrate, chromaLocation, chromaSubsampling, codec, codedHeight, codedWidth, colorPrimaries, colorRange, colorSpace, colorTrc, varDefault, displayTitle, extendedDisplayTitle, frameRate, height, id, index, language, languageCode, languageTag, level, original, profile, refFrames, scanType, streamType, title, width, location, audioChannelLayout, channels, samplingRate, selected);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaLocationOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaLocation == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaLocation), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaSubsamplingOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaSubsampling == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaSubsampling), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodecOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Codec == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Codec), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorPrimariesOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorPrimaries == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorPrimaries), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorRangeOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorRange == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorRange), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorSpaceOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorSpace == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorSpace), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorTrcOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorTrc == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorTrc), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DisplayTitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DisplayTitle == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DisplayTitle), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ExtendedDisplayTitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ExtendedDisplayTitle == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ExtendedDisplayTitle), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.IdOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Id == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Id), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Language == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Language), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageCodeOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageCode == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageCode), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageTagOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageTag == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageTag), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ProfileOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Profile == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Profile), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ScanTypeOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ScanType == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ScanType), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.TitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Title == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Title), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LocationOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Location == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Location), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.AudioChannelLayoutOption.IsSet && getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.AudioChannelLayout == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.AudioChannelLayout), "Property is required for class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.");

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.BitDepthOption.IsSet)
                writer.WriteNumber("bitDepth", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.BitDepthOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.BitrateOption.IsSet)
                writer.WriteNumber("bitrate", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.BitrateOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaLocationOption.IsSet)
                writer.WriteString("chromaLocation", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaLocation);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaSubsamplingOption.IsSet)
                writer.WriteString("chromaSubsampling", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChromaSubsampling);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodecOption.IsSet)
                writer.WriteString("codec", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Codec);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodedHeightOption.IsSet)
                writer.WriteNumber("codedHeight", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodedHeightOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodedWidthOption.IsSet)
                writer.WriteNumber("codedWidth", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.CodedWidthOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorPrimariesOption.IsSet)
                writer.WriteString("colorPrimaries", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorPrimaries);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorRangeOption.IsSet)
                writer.WriteString("colorRange", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorRange);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorSpaceOption.IsSet)
                writer.WriteString("colorSpace", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorSpace);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorTrcOption.IsSet)
                writer.WriteString("colorTrc", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ColorTrc);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DefaultOption.IsSet)
                writer.WriteBoolean("default", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DefaultOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DisplayTitleOption.IsSet)
                writer.WriteString("displayTitle", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.DisplayTitle);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ExtendedDisplayTitleOption.IsSet)
                writer.WriteString("extendedDisplayTitle", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ExtendedDisplayTitle);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.FrameRateOption.IsSet)
                writer.WriteNumber("frameRate", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.FrameRateOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.HeightOption.IsSet)
                writer.WriteNumber("height", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.HeightOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.IdOption.IsSet)
                writer.WriteString("id", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Id);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.IndexOption.IsSet)
                writer.WriteNumber("index", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.IndexOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageOption.IsSet)
                writer.WriteString("language", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Language);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageCodeOption.IsSet)
                writer.WriteString("languageCode", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageCode);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageTagOption.IsSet)
                writer.WriteString("languageTag", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LanguageTag);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LevelOption.IsSet)
                writer.WriteNumber("level", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LevelOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.OriginalOption.IsSet)
                writer.WriteBoolean("original", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.OriginalOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ProfileOption.IsSet)
                writer.WriteString("profile", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Profile);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.RefFramesOption.IsSet)
                writer.WriteNumber("refFrames", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.RefFramesOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ScanTypeOption.IsSet)
                writer.WriteString("scanType", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ScanType);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.StreamTypeOption.IsSet)
                writer.WriteNumber("streamType", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.StreamTypeOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.TitleOption.IsSet)
                writer.WriteString("title", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Title);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.WidthOption.IsSet)
                writer.WriteNumber("width", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.WidthOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.LocationOption.IsSet)
                writer.WriteString("location", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.Location);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.AudioChannelLayoutOption.IsSet)
                writer.WriteString("audioChannelLayout", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.AudioChannelLayout);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChannelsOption.IsSet)
                writer.WriteNumber("channels", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.ChannelsOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.SamplingRateOption.IsSet)
                writer.WriteNumber("samplingRate", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.SamplingRateOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.SelectedOption.IsSet)
                writer.WriteBoolean("selected", getSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner.SelectedOption.Value!.Value);
        }
    }

    /// <summary>
    /// The GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner))]
    public partial class GetSessions200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInnerSerializationContext : JsonSerializerContext { }
}
