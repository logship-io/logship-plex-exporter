// <auto-generated>
/*
 * Plex API
 *
 * Plex OpenAPI Spec 
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Logship.Plex.OpenApi.Client;

namespace Logship.Plex.OpenApi.Model
{
    /// <summary>
    /// GetSessions200ResponseMediaContainerMetadataInner
    /// </summary>
    public partial class GetSessions200ResponseMediaContainerMetadataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessions200ResponseMediaContainerMetadataInner" /> class.
        /// </summary>
        /// <param name="addedAt">addedAt</param>
        /// <param name="art">art</param>
        /// <param name="audienceRating">audienceRating</param>
        /// <param name="audienceRatingImage">audienceRatingImage</param>
        /// <param name="chapterSource">chapterSource</param>
        /// <param name="contentRating">contentRating</param>
        /// <param name="duration">duration</param>
        /// <param name="guid">guid</param>
        /// <param name="key">key</param>
        /// <param name="librarySectionID">librarySectionID</param>
        /// <param name="librarySectionKey">librarySectionKey</param>
        /// <param name="librarySectionTitle">librarySectionTitle</param>
        /// <param name="originallyAvailableAt">originallyAvailableAt</param>
        /// <param name="ratingKey">ratingKey</param>
        /// <param name="sessionKey">sessionKey</param>
        /// <param name="slug">slug</param>
        /// <param name="studio">studio</param>
        /// <param name="summary">summary</param>
        /// <param name="tagline">tagline</param>
        /// <param name="thumb">thumb</param>
        /// <param name="title">title</param>
        /// <param name="type">type</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="viewOffset">viewOffset</param>
        /// <param name="year">year</param>
        /// <param name="media">media</param>
        /// <param name="ultraBlurColors">ultraBlurColors</param>
        /// <param name="genre">genre</param>
        /// <param name="country">country</param>
        /// <param name="rating">rating</param>
        /// <param name="director">director</param>
        /// <param name="writer">writer</param>
        /// <param name="role">role</param>
        /// <param name="producer">producer</param>
        /// <param name="field">field</param>
        /// <param name="user">user</param>
        /// <param name="player">player</param>
        /// <param name="session">session</param>
        [JsonConstructor]
        public GetSessions200ResponseMediaContainerMetadataInner(Option<int?> addedAt = default, Option<string?> art = default, Option<decimal?> audienceRating = default, Option<string?> audienceRatingImage = default, Option<string?> chapterSource = default, Option<string?> contentRating = default, Option<int?> duration = default, Option<string?> guid = default, Option<string?> key = default, Option<string?> librarySectionID = default, Option<string?> librarySectionKey = default, Option<string?> librarySectionTitle = default, Option<string?> originallyAvailableAt = default, Option<string?> ratingKey = default, Option<string?> sessionKey = default, Option<string?> slug = default, Option<string?> studio = default, Option<string?> summary = default, Option<string?> tagline = default, Option<string?> thumb = default, Option<string?> title = default, Option<string?> type = default, Option<int?> updatedAt = default, Option<int?> viewOffset = default, Option<int?> year = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>?> media = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>?> ultraBlurColors = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> genre = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> country = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>?> rating = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>?> director = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>?> writer = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>?> role = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>?> producer = default, Option<List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>?> field = default, Option<GetSessions200ResponseMediaContainerMetadataInnerUser?> user = default, Option<GetSessions200ResponseMediaContainerMetadataInnerPlayer?> player = default, Option<GetSessions200ResponseMediaContainerMetadataInnerSession?> session = default)
        {
            AddedAtOption = addedAt;
            ArtOption = art;
            AudienceRatingOption = audienceRating;
            AudienceRatingImageOption = audienceRatingImage;
            ChapterSourceOption = chapterSource;
            ContentRatingOption = contentRating;
            DurationOption = duration;
            GuidOption = guid;
            KeyOption = key;
            LibrarySectionIDOption = librarySectionID;
            LibrarySectionKeyOption = librarySectionKey;
            LibrarySectionTitleOption = librarySectionTitle;
            OriginallyAvailableAtOption = originallyAvailableAt;
            RatingKeyOption = ratingKey;
            SessionKeyOption = sessionKey;
            SlugOption = slug;
            StudioOption = studio;
            SummaryOption = summary;
            TaglineOption = tagline;
            ThumbOption = thumb;
            TitleOption = title;
            TypeOption = type;
            UpdatedAtOption = updatedAt;
            ViewOffsetOption = viewOffset;
            YearOption = year;
            MediaOption = media;
            UltraBlurColorsOption = ultraBlurColors;
            GenreOption = genre;
            CountryOption = country;
            RatingOption = rating;
            DirectorOption = director;
            WriterOption = writer;
            RoleOption = role;
            ProducerOption = producer;
            FieldOption = field;
            UserOption = user;
            PlayerOption = player;
            SessionOption = session;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AddedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets AddedAt
        /// </summary>
        [JsonPropertyName("addedAt")]
        public int? AddedAt { get { return this.AddedAtOption; } set { this.AddedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Art
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArtOption { get; private set; }

        /// <summary>
        /// Gets or Sets Art
        /// </summary>
        [JsonPropertyName("art")]
        public string? Art { get { return this.ArtOption; } set { this.ArtOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudienceRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AudienceRatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudienceRating
        /// </summary>
        [JsonPropertyName("audienceRating")]
        public decimal? AudienceRating { get { return this.AudienceRatingOption; } set { this.AudienceRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of AudienceRatingImage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AudienceRatingImageOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudienceRatingImage
        /// </summary>
        [JsonPropertyName("audienceRatingImage")]
        public string? AudienceRatingImage { get { return this.AudienceRatingImageOption; } set { this.AudienceRatingImageOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChapterSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChapterSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChapterSource
        /// </summary>
        [JsonPropertyName("chapterSource")]
        public string? ChapterSource { get { return this.ChapterSourceOption; } set { this.ChapterSourceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentRatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentRating
        /// </summary>
        [JsonPropertyName("contentRating")]
        public string? ContentRating { get { return this.ContentRatingOption; } set { this.ContentRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Guid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GuidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [JsonPropertyName("guid")]
        public string? Guid { get { return this.GuidOption; } set { this.GuidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of LibrarySectionID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LibrarySectionIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets LibrarySectionID
        /// </summary>
        [JsonPropertyName("librarySectionID")]
        public string? LibrarySectionID { get { return this.LibrarySectionIDOption; } set { this.LibrarySectionIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of LibrarySectionKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LibrarySectionKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets LibrarySectionKey
        /// </summary>
        [JsonPropertyName("librarySectionKey")]
        public string? LibrarySectionKey { get { return this.LibrarySectionKeyOption; } set { this.LibrarySectionKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of LibrarySectionTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LibrarySectionTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets LibrarySectionTitle
        /// </summary>
        [JsonPropertyName("librarySectionTitle")]
        public string? LibrarySectionTitle { get { return this.LibrarySectionTitleOption; } set { this.LibrarySectionTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginallyAvailableAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginallyAvailableAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginallyAvailableAt
        /// </summary>
        [JsonPropertyName("originallyAvailableAt")]
        public string? OriginallyAvailableAt { get { return this.OriginallyAvailableAtOption; } set { this.OriginallyAvailableAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatingKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets RatingKey
        /// </summary>
        [JsonPropertyName("ratingKey")]
        public string? RatingKey { get { return this.RatingKeyOption; } set { this.RatingKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets SessionKey
        /// </summary>
        [JsonPropertyName("sessionKey")]
        public string? SessionKey { get { return this.SessionKeyOption; } set { this.SessionKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Studio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudioOption { get; private set; }

        /// <summary>
        /// Gets or Sets Studio
        /// </summary>
        [JsonPropertyName("studio")]
        public string? Studio { get { return this.StudioOption; } set { this.StudioOption = new(value); } }

        /// <summary>
        /// Used to track the state of Summary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SummaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [JsonPropertyName("summary")]
        public string? Summary { get { return this.SummaryOption; } set { this.SummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tagline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaglineOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tagline
        /// </summary>
        [JsonPropertyName("tagline")]
        public string? Tagline { get { return this.TaglineOption; } set { this.TaglineOption = new(value); } }

        /// <summary>
        /// Used to track the state of Thumb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThumbOption { get; private set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [JsonPropertyName("thumb")]
        public string? Thumb { get { return this.ThumbOption; } set { this.ThumbOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public int? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ViewOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ViewOffsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets ViewOffset
        /// </summary>
        [JsonPropertyName("viewOffset")]
        public int? ViewOffset { get { return this.ViewOffsetOption; } set { this.ViewOffsetOption = new(value); } }

        /// <summary>
        /// Used to track the state of Year
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YearOption { get; private set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [JsonPropertyName("year")]
        public int? Year { get { return this.YearOption; } set { this.YearOption = new(value); } }

        /// <summary>
        /// Used to track the state of Media
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>?> MediaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [JsonPropertyName("Media")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>? Media { get { return this.MediaOption; } set { this.MediaOption = new(value); } }

        /// <summary>
        /// Used to track the state of UltraBlurColors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>?> UltraBlurColorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UltraBlurColors
        /// </summary>
        [JsonPropertyName("UltraBlurColors")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>? UltraBlurColors { get { return this.UltraBlurColorsOption; } set { this.UltraBlurColorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Genre
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> GenreOption { get; private set; }

        /// <summary>
        /// Gets or Sets Genre
        /// </summary>
        [JsonPropertyName("Genre")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>? Genre { get { return this.GenreOption; } set { this.GenreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("Country")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>?> RatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("Rating")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>? Rating { get { return this.RatingOption; } set { this.RatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Director
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>?> DirectorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Director
        /// </summary>
        [JsonPropertyName("Director")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>? Director { get { return this.DirectorOption; } set { this.DirectorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Writer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>?> WriterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Writer
        /// </summary>
        [JsonPropertyName("Writer")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>? Writer { get { return this.WriterOption; } set { this.WriterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("Role")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Producer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>?> ProducerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Producer
        /// </summary>
        [JsonPropertyName("Producer")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>? Producer { get { return this.ProducerOption; } set { this.ProducerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Field
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>?> FieldOption { get; private set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [JsonPropertyName("Field")]
        public List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>? Field { get { return this.FieldOption; } set { this.FieldOption = new(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetSessions200ResponseMediaContainerMetadataInnerUser?> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("User")]
        public GetSessions200ResponseMediaContainerMetadataInnerUser? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Used to track the state of Player
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetSessions200ResponseMediaContainerMetadataInnerPlayer?> PlayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [JsonPropertyName("Player")]
        public GetSessions200ResponseMediaContainerMetadataInnerPlayer? Player { get { return this.PlayerOption; } set { this.PlayerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Session
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetSessions200ResponseMediaContainerMetadataInnerSession?> SessionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [JsonPropertyName("Session")]
        public GetSessions200ResponseMediaContainerMetadataInnerSession? Session { get { return this.SessionOption; } set { this.SessionOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessions200ResponseMediaContainerMetadataInner {\n");
            sb.Append("  AddedAt: ").Append(AddedAt).Append("\n");
            sb.Append("  Art: ").Append(Art).Append("\n");
            sb.Append("  AudienceRating: ").Append(AudienceRating).Append("\n");
            sb.Append("  AudienceRatingImage: ").Append(AudienceRatingImage).Append("\n");
            sb.Append("  ChapterSource: ").Append(ChapterSource).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LibrarySectionID: ").Append(LibrarySectionID).Append("\n");
            sb.Append("  LibrarySectionKey: ").Append(LibrarySectionKey).Append("\n");
            sb.Append("  LibrarySectionTitle: ").Append(LibrarySectionTitle).Append("\n");
            sb.Append("  OriginallyAvailableAt: ").Append(OriginallyAvailableAt).Append("\n");
            sb.Append("  RatingKey: ").Append(RatingKey).Append("\n");
            sb.Append("  SessionKey: ").Append(SessionKey).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Tagline: ").Append(Tagline).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ViewOffset: ").Append(ViewOffset).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  UltraBlurColors: ").Append(UltraBlurColors).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Director: ").Append(Director).Append("\n");
            sb.Append("  Writer: ").Append(Writer).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Producer: ").Append(Producer).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessions200ResponseMediaContainerMetadataInner" />
    /// </summary>
    public class GetSessions200ResponseMediaContainerMetadataInnerJsonConverter : JsonConverter<GetSessions200ResponseMediaContainerMetadataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessions200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessions200ResponseMediaContainerMetadataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> addedAt = default;
            Option<string?> art = default;
            Option<decimal?> audienceRating = default;
            Option<string?> audienceRatingImage = default;
            Option<string?> chapterSource = default;
            Option<string?> contentRating = default;
            Option<int?> duration = default;
            Option<string?> guid = default;
            Option<string?> key = default;
            Option<string?> librarySectionID = default;
            Option<string?> librarySectionKey = default;
            Option<string?> librarySectionTitle = default;
            Option<string?> originallyAvailableAt = default;
            Option<string?> ratingKey = default;
            Option<string?> sessionKey = default;
            Option<string?> slug = default;
            Option<string?> studio = default;
            Option<string?> summary = default;
            Option<string?> tagline = default;
            Option<string?> thumb = default;
            Option<string?> title = default;
            Option<string?> type = default;
            Option<int?> updatedAt = default;
            Option<int?> viewOffset = default;
            Option<int?> year = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>?> media = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>?> ultraBlurColors = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> genre = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?> country = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>?> rating = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>?> director = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>?> writer = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>?> role = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>?> producer = default;
            Option<List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>?> field = default;
            Option<GetSessions200ResponseMediaContainerMetadataInnerUser?> user = default;
            Option<GetSessions200ResponseMediaContainerMetadataInnerPlayer?> player = default;
            Option<GetSessions200ResponseMediaContainerMetadataInnerSession?> session = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addedAt = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "art":
                            art = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audienceRating":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                audienceRating = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "audienceRatingImage":
                            audienceRatingImage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chapterSource":
                            chapterSource = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contentRating":
                            contentRating = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                duration = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "guid":
                            guid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "librarySectionID":
                            librarySectionID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "librarySectionKey":
                            librarySectionKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "librarySectionTitle":
                            librarySectionTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "originallyAvailableAt":
                            originallyAvailableAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ratingKey":
                            ratingKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sessionKey":
                            sessionKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studio":
                            studio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "summary":
                            summary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tagline":
                            tagline = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumb":
                            thumb = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "viewOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                viewOffset = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "year":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                year = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Media":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                media = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerMediaInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "UltraBlurColors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ultraBlurColors = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerUltraBlurColorsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Genre":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                genre = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Country":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                country = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerGenreInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Rating":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rating = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerRatingInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Director":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                director = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerDirectorInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Writer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                writer = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerWriterInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Role":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                role = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerRoleInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Producer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                producer = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerProducerInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Field":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                field = new Option<List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>?>(JsonSerializer.Deserialize<List<GetSessions200ResponseMediaContainerMetadataInnerFieldInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "User":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                user = new Option<GetSessions200ResponseMediaContainerMetadataInnerUser?>(JsonSerializer.Deserialize<GetSessions200ResponseMediaContainerMetadataInnerUser>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Player":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                player = new Option<GetSessions200ResponseMediaContainerMetadataInnerPlayer?>(JsonSerializer.Deserialize<GetSessions200ResponseMediaContainerMetadataInnerPlayer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Session":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                session = new Option<GetSessions200ResponseMediaContainerMetadataInnerSession?>(JsonSerializer.Deserialize<GetSessions200ResponseMediaContainerMetadataInnerSession>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addedAt.IsSet && addedAt.Value == null)
                throw new ArgumentNullException(nameof(addedAt), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (art.IsSet && art.Value == null)
                throw new ArgumentNullException(nameof(art), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (audienceRating.IsSet && audienceRating.Value == null)
                throw new ArgumentNullException(nameof(audienceRating), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (audienceRatingImage.IsSet && audienceRatingImage.Value == null)
                throw new ArgumentNullException(nameof(audienceRatingImage), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (chapterSource.IsSet && chapterSource.Value == null)
                throw new ArgumentNullException(nameof(chapterSource), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (contentRating.IsSet && contentRating.Value == null)
                throw new ArgumentNullException(nameof(contentRating), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (guid.IsSet && guid.Value == null)
                throw new ArgumentNullException(nameof(guid), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (librarySectionID.IsSet && librarySectionID.Value == null)
                throw new ArgumentNullException(nameof(librarySectionID), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (librarySectionKey.IsSet && librarySectionKey.Value == null)
                throw new ArgumentNullException(nameof(librarySectionKey), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (librarySectionTitle.IsSet && librarySectionTitle.Value == null)
                throw new ArgumentNullException(nameof(librarySectionTitle), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (originallyAvailableAt.IsSet && originallyAvailableAt.Value == null)
                throw new ArgumentNullException(nameof(originallyAvailableAt), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (ratingKey.IsSet && ratingKey.Value == null)
                throw new ArgumentNullException(nameof(ratingKey), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (sessionKey.IsSet && sessionKey.Value == null)
                throw new ArgumentNullException(nameof(sessionKey), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (studio.IsSet && studio.Value == null)
                throw new ArgumentNullException(nameof(studio), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (tagline.IsSet && tagline.Value == null)
                throw new ArgumentNullException(nameof(tagline), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (thumb.IsSet && thumb.Value == null)
                throw new ArgumentNullException(nameof(thumb), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (viewOffset.IsSet && viewOffset.Value == null)
                throw new ArgumentNullException(nameof(viewOffset), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (year.IsSet && year.Value == null)
                throw new ArgumentNullException(nameof(year), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (media.IsSet && media.Value == null)
                throw new ArgumentNullException(nameof(media), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (ultraBlurColors.IsSet && ultraBlurColors.Value == null)
                throw new ArgumentNullException(nameof(ultraBlurColors), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (genre.IsSet && genre.Value == null)
                throw new ArgumentNullException(nameof(genre), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (director.IsSet && director.Value == null)
                throw new ArgumentNullException(nameof(director), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (writer.IsSet && writer.Value == null)
                throw new ArgumentNullException(nameof(writer), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (producer.IsSet && producer.Value == null)
                throw new ArgumentNullException(nameof(producer), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (player.IsSet && player.Value == null)
                throw new ArgumentNullException(nameof(player), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (session.IsSet && session.Value == null)
                throw new ArgumentNullException(nameof(session), "Property is not nullable for class GetSessions200ResponseMediaContainerMetadataInner.");

            return new GetSessions200ResponseMediaContainerMetadataInner(addedAt, art, audienceRating, audienceRatingImage, chapterSource, contentRating, duration, guid, key, librarySectionID, librarySectionKey, librarySectionTitle, originallyAvailableAt, ratingKey, sessionKey, slug, studio, summary, tagline, thumb, title, type, updatedAt, viewOffset, year, media, ultraBlurColors, genre, country, rating, director, writer, role, producer, field, user, player, session);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessions200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInner getSessions200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSessions200ResponseMediaContainerMetadataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessions200ResponseMediaContainerMetadataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessions200ResponseMediaContainerMetadataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSessions200ResponseMediaContainerMetadataInner getSessions200ResponseMediaContainerMetadataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessions200ResponseMediaContainerMetadataInner.ArtOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Art == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Art), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.AudienceRatingImageOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.AudienceRatingImage == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.AudienceRatingImage), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.ChapterSourceOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.ChapterSource == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.ChapterSource), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.ContentRatingOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.ContentRating == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.ContentRating), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.GuidOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Guid == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Guid), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.KeyOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Key == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Key), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionIDOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.LibrarySectionID == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.LibrarySectionID), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionKeyOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.LibrarySectionKey == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.LibrarySectionKey), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionTitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.LibrarySectionTitle == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.LibrarySectionTitle), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.OriginallyAvailableAtOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.OriginallyAvailableAt == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.OriginallyAvailableAt), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.RatingKey == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.RatingKey), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.SessionKeyOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.SessionKey == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.SessionKey), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.SlugOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Slug == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Slug), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.StudioOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Studio == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Studio), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.SummaryOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Summary == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Summary), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.TaglineOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Tagline == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Tagline), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.ThumbOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Thumb == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Thumb), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.TitleOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Title == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Title), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.TypeOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Type == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Type), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.MediaOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Media == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Media), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.UltraBlurColorsOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.UltraBlurColors == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.UltraBlurColors), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.GenreOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Genre == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Genre), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.CountryOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Country == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Country), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.RatingOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Rating == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Rating), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.DirectorOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Director == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Director), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.WriterOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Writer == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Writer), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.RoleOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Role == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Role), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.ProducerOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Producer == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Producer), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.FieldOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Field == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Field), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.UserOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.User == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.User), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.PlayerOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Player == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Player), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.SessionOption.IsSet && getSessions200ResponseMediaContainerMetadataInner.Session == null)
                throw new ArgumentNullException(nameof(getSessions200ResponseMediaContainerMetadataInner.Session), "Property is required for class GetSessions200ResponseMediaContainerMetadataInner.");

            if (getSessions200ResponseMediaContainerMetadataInner.AddedAtOption.IsSet)
                writer.WriteNumber("addedAt", getSessions200ResponseMediaContainerMetadataInner.AddedAtOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.ArtOption.IsSet)
                writer.WriteString("art", getSessions200ResponseMediaContainerMetadataInner.Art);

            if (getSessions200ResponseMediaContainerMetadataInner.AudienceRatingOption.IsSet)
                writer.WriteNumber("audienceRating", getSessions200ResponseMediaContainerMetadataInner.AudienceRatingOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.AudienceRatingImageOption.IsSet)
                writer.WriteString("audienceRatingImage", getSessions200ResponseMediaContainerMetadataInner.AudienceRatingImage);

            if (getSessions200ResponseMediaContainerMetadataInner.ChapterSourceOption.IsSet)
                writer.WriteString("chapterSource", getSessions200ResponseMediaContainerMetadataInner.ChapterSource);

            if (getSessions200ResponseMediaContainerMetadataInner.ContentRatingOption.IsSet)
                writer.WriteString("contentRating", getSessions200ResponseMediaContainerMetadataInner.ContentRating);

            if (getSessions200ResponseMediaContainerMetadataInner.DurationOption.IsSet)
                writer.WriteNumber("duration", getSessions200ResponseMediaContainerMetadataInner.DurationOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.GuidOption.IsSet)
                writer.WriteString("guid", getSessions200ResponseMediaContainerMetadataInner.Guid);

            if (getSessions200ResponseMediaContainerMetadataInner.KeyOption.IsSet)
                writer.WriteString("key", getSessions200ResponseMediaContainerMetadataInner.Key);

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionIDOption.IsSet)
                writer.WriteString("librarySectionID", getSessions200ResponseMediaContainerMetadataInner.LibrarySectionID);

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionKeyOption.IsSet)
                writer.WriteString("librarySectionKey", getSessions200ResponseMediaContainerMetadataInner.LibrarySectionKey);

            if (getSessions200ResponseMediaContainerMetadataInner.LibrarySectionTitleOption.IsSet)
                writer.WriteString("librarySectionTitle", getSessions200ResponseMediaContainerMetadataInner.LibrarySectionTitle);

            if (getSessions200ResponseMediaContainerMetadataInner.OriginallyAvailableAtOption.IsSet)
                writer.WriteString("originallyAvailableAt", getSessions200ResponseMediaContainerMetadataInner.OriginallyAvailableAt);

            if (getSessions200ResponseMediaContainerMetadataInner.RatingKeyOption.IsSet)
                writer.WriteString("ratingKey", getSessions200ResponseMediaContainerMetadataInner.RatingKey);

            if (getSessions200ResponseMediaContainerMetadataInner.SessionKeyOption.IsSet)
                writer.WriteString("sessionKey", getSessions200ResponseMediaContainerMetadataInner.SessionKey);

            if (getSessions200ResponseMediaContainerMetadataInner.SlugOption.IsSet)
                writer.WriteString("slug", getSessions200ResponseMediaContainerMetadataInner.Slug);

            if (getSessions200ResponseMediaContainerMetadataInner.StudioOption.IsSet)
                writer.WriteString("studio", getSessions200ResponseMediaContainerMetadataInner.Studio);

            if (getSessions200ResponseMediaContainerMetadataInner.SummaryOption.IsSet)
                writer.WriteString("summary", getSessions200ResponseMediaContainerMetadataInner.Summary);

            if (getSessions200ResponseMediaContainerMetadataInner.TaglineOption.IsSet)
                writer.WriteString("tagline", getSessions200ResponseMediaContainerMetadataInner.Tagline);

            if (getSessions200ResponseMediaContainerMetadataInner.ThumbOption.IsSet)
                writer.WriteString("thumb", getSessions200ResponseMediaContainerMetadataInner.Thumb);

            if (getSessions200ResponseMediaContainerMetadataInner.TitleOption.IsSet)
                writer.WriteString("title", getSessions200ResponseMediaContainerMetadataInner.Title);

            if (getSessions200ResponseMediaContainerMetadataInner.TypeOption.IsSet)
                writer.WriteString("type", getSessions200ResponseMediaContainerMetadataInner.Type);

            if (getSessions200ResponseMediaContainerMetadataInner.UpdatedAtOption.IsSet)
                writer.WriteNumber("updatedAt", getSessions200ResponseMediaContainerMetadataInner.UpdatedAtOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.ViewOffsetOption.IsSet)
                writer.WriteNumber("viewOffset", getSessions200ResponseMediaContainerMetadataInner.ViewOffsetOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.YearOption.IsSet)
                writer.WriteNumber("year", getSessions200ResponseMediaContainerMetadataInner.YearOption.Value!.Value);

            if (getSessions200ResponseMediaContainerMetadataInner.MediaOption.IsSet)
            {
                writer.WritePropertyName("Media");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Media, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.UltraBlurColorsOption.IsSet)
            {
                writer.WritePropertyName("UltraBlurColors");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.UltraBlurColors, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.GenreOption.IsSet)
            {
                writer.WritePropertyName("Genre");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Genre, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.CountryOption.IsSet)
            {
                writer.WritePropertyName("Country");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Country, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.RatingOption.IsSet)
            {
                writer.WritePropertyName("Rating");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Rating, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.DirectorOption.IsSet)
            {
                writer.WritePropertyName("Director");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Director, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.WriterOption.IsSet)
            {
                writer.WritePropertyName("Writer");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Writer, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.RoleOption.IsSet)
            {
                writer.WritePropertyName("Role");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Role, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.ProducerOption.IsSet)
            {
                writer.WritePropertyName("Producer");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Producer, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.FieldOption.IsSet)
            {
                writer.WritePropertyName("Field");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Field, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.UserOption.IsSet)
            {
                writer.WritePropertyName("User");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.User, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.PlayerOption.IsSet)
            {
                writer.WritePropertyName("Player");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Player, jsonSerializerOptions);
            }
            if (getSessions200ResponseMediaContainerMetadataInner.SessionOption.IsSet)
            {
                writer.WritePropertyName("Session");
                JsonSerializer.Serialize(writer, getSessions200ResponseMediaContainerMetadataInner.Session, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The GetSessions200ResponseMediaContainerMetadataInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(GetSessions200ResponseMediaContainerMetadataInner))]
    public partial class GetSessions200ResponseMediaContainerMetadataInnerSerializationContext : JsonSerializerContext { }
}
